{
  "address": "0xb993Ee8e1c5E39C965151213c4e3d80752F9Fdce",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "MerkleRootModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMultipleMerkleDistributor.Claims[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "claimMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "setMerkleRootForEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "6f79d3733b7e9dcc5d3a8e37b3ee8002",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"MerkleRootModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"internalType\":\"struct IMultipleMerkleDistributor.Claims[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"setMerkleRootForEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256,address,uint256,bytes32[],uint256)\":{\"params\":{\"account\":\": address used for escrow entry\",\"amount\":\": token amount to be escrowed\",\"epoch\":\": distribution index number\",\"index\":\": used for merkle tree managment and verification\",\"merkleProof\":\": off-chain generated proof of merkle tree inclusion\"}},\"claimMultiple((uint256,address,uint256,bytes32[],uint256)[])\":{\"params\":{\"claims\":\": array of valid claims\"}},\"constructor\":{\"params\":{\"_owner\":\": designated owner of this contract\",\"_token\":\": address of erc20 token to be distributed\"}},\"isClaimed(uint256,uint256)\":{\"params\":{\"epoch\":\": distribution index number\",\"index\":\": used for claim managment\"},\"returns\":{\"_0\":\"true if indexed claim has been claimed\"}},\"setMerkleRootForEpoch(bytes32,uint256)\":{\"params\":{\"epoch\":\": distribution index number\",\"merkleRoot\":\": new merkle root\"}}},\"stateVariables\":{\"token\":{\"return\":\"token to be distributed\",\"returns\":{\"_0\":\"token to be distributed\"}}},\"title\":\"DexToro MultipleMerkleDistributor \",\"version\":1},\"userdoc\":{\"events\":{\"Claimed(uint256,address,uint256,uint256)\":{\"notice\":\"event is triggered whenever a call to `claim` succeeds\"},\"MerkleRootModified(uint256)\":{\"notice\":\"event is triggered whenever a merkle root is set\"}},\"kind\":\"user\",\"methods\":{\"claim(uint256,address,uint256,bytes32[],uint256)\":{\"notice\":\"attempt to claim as `account` and transfer `amount` to `account`\"},\"claimMultiple((uint256,address,uint256,bytes32[],uint256)[])\":{\"notice\":\"function that aggregates multiple claims\"},\"constructor\":{\"notice\":\"set addresses ERC20 contract Establish merkle root for verification\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"determine if indexed claim has been claimed\"},\"setMerkleRootForEpoch(bytes32,uint256)\":{\"notice\":\"modify merkle root for existing distribution epoch\"}},\"notice\":\"Facilitates trading incentives distribution over multiple periods.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultipleMerkleDistributor.sol\":\"MultipleMerkleDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/MultipleMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./utils/Owned.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./interfaces/IRewardEscrow.sol\\\";\\r\\nimport \\\"./interfaces/IMultipleMerkleDistributor.sol\\\";\\r\\n\\r\\n/// @title DexToro MultipleMerkleDistributor\\r\\n/// \\r\\n/// @notice Facilitates trading incentives distribution over multiple periods.\\r\\ncontract MultipleMerkleDistributor is IMultipleMerkleDistributor, Owned {\\r\\n    using SafeERC20 for IERC20;\\r\\n    /// @inheritdoc IMultipleMerkleDistributor\\r\\n    address public immutable override token;\\r\\n\\r\\n    /// @inheritdoc IMultipleMerkleDistributor\\r\\n    mapping(uint256 => bytes32) public override merkleRoots;\\r\\n\\r\\n    /// @notice an epoch to packed array of claimed booleans mapping\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMaps;\\r\\n\\r\\n    /// @notice set addresses ERC20 contract\\r\\n    /// Establish merkle root for verification\\r\\n    /// @param _owner: designated owner of this contract\\r\\n    /// @param _token: address of erc20 token to be distributed\\r\\n    constructor(address _owner, address _token) Owned(_owner) {\\r\\n        token = _token;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IMultipleMerkleDistributor\\r\\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        merkleRoots[epoch] = merkleRoot;\\r\\n        emit MerkleRootModified(epoch);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IMultipleMerkleDistributor\\r\\n    function isClaimed(uint256 index, uint256 epoch)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 claimedWordIndex = index / 256;\\r\\n        uint256 claimedBitIndex = index % 256;\\r\\n        uint256 claimedWord = claimedBitMaps[epoch][claimedWordIndex];\\r\\n        uint256 mask = (1 << claimedBitIndex);\\r\\n        return claimedWord & mask == mask;\\r\\n    }\\r\\n\\r\\n    /// @notice set claimed status for indexed claim to true\\r\\n    /// @param index: used for claim managment\\r\\n    /// @param epoch: distribution index to check\\r\\n    function _setClaimed(uint256 index, uint256 epoch) private {\\r\\n        uint256 claimedWordIndex = index / 256;\\r\\n        uint256 claimedBitIndex = index % 256;\\r\\n        claimedBitMaps[epoch][claimedWordIndex] =\\r\\n            claimedBitMaps[epoch][claimedWordIndex] |\\r\\n            (1 << claimedBitIndex);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IMultipleMerkleDistributor\\r\\n    function claim(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        bytes32[] calldata merkleProof,\\r\\n        uint256 epoch\\r\\n    ) public override {\\r\\n        require(\\r\\n            !isClaimed(index, epoch),\\r\\n            \\\"MultipleMerkleDistributor: Drop already claimed.\\\"\\r\\n        );\\r\\n\\r\\n        // verify the merkle proof\\r\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\r\\n        require(\\r\\n            MerkleProof.verify(merkleProof, merkleRoots[epoch], node),\\r\\n            \\\"MultipleMerkleDistributor: Invalid proof.\\\"\\r\\n        );\\r\\n\\r\\n        // mark it claimed and send the token\\r\\n        _setClaimed(index, epoch);\\r\\n        IERC20(token).safeTransfer(account, amount);\\r\\n\\r\\n        emit Claimed(index, account, amount, epoch);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IMultipleMerkleDistributor\\r\\n    function claimMultiple(Claims[] calldata claims) external override {\\r\\n        uint256 cacheLength = claims.length;\\r\\n        for (uint256 i = 0; i < cacheLength; ) {\\r\\n            claim(\\r\\n                claims[i].index,\\r\\n                claims[i].account,\\r\\n                claims[i].amount,\\r\\n                claims[i].merkleProof,\\r\\n                claims[i].epoch\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf0d6d142cf7d8b88830e5a075413042770d54f9d3ff3f862c95aaac7a391e575\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMultipleMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// Allows anyone to claim a token if they exist in a merkle root.\\r\\ninterface IMultipleMerkleDistributor {\\r\\n    /// @notice data structure for aggregating multiple claims\\r\\n    struct Claims {\\r\\n        uint256 index;\\r\\n        address account;\\r\\n        uint256 amount;\\r\\n        bytes32[] merkleProof;\\r\\n        uint256 epoch;\\r\\n    }\\r\\n\\r\\n    /// @notice event is triggered whenever a call to `claim` succeeds\\r\\n    event Claimed(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        uint256 epoch\\r\\n    );\\r\\n\\r\\n    /// @notice event is triggered whenever a merkle root is set\\r\\n    event MerkleRootModified(uint256 epoch);\\r\\n\\r\\n    /// @return token to be distributed\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    // @return the merkle root of the merkle tree containing account balances available to claim\\r\\n    function merkleRoots(uint256) external view returns (bytes32);\\r\\n\\r\\n    /// @notice determine if indexed claim has been claimed\\r\\n    /// @param index: used for claim managment\\r\\n    /// @param epoch: distribution index number\\r\\n    /// @return true if indexed claim has been claimed\\r\\n    function isClaimed(uint256 index, uint256 epoch)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /// @notice attempt to claim as `account` and transfer `amount` to `account`\\r\\n    /// @param index: used for merkle tree managment and verification\\r\\n    /// @param account: address used for escrow entry\\r\\n    /// @param amount: token amount to be escrowed\\r\\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\\r\\n    /// @param epoch: distribution index number\\r\\n    function claim(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        bytes32[] calldata merkleProof,\\r\\n        uint256 epoch\\r\\n    ) external;\\r\\n\\r\\n    /// @notice function that aggregates multiple claims\\r\\n    /// @param claims: array of valid claims\\r\\n    function claimMultiple(Claims[] calldata claims) external;\\r\\n\\r\\n    /// @notice modify merkle root for existing distribution epoch\\r\\n    /// @param merkleRoot: new merkle root\\r\\n    /// @param epoch: distribution index number\\r\\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeef8abef3f3c6d131b8152ff6a1c35cc6a927fa8fa1cb554a8bcb9ccc59795e5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary VestingEntries {\\r\\n    struct VestingEntry {\\r\\n        uint64 endTime;\\r\\n        uint256 escrowAmount;\\r\\n        uint256 duration;\\r\\n    }\\r\\n    struct VestingEntryWithID {\\r\\n        uint64 endTime;\\r\\n        uint256 escrowAmount;\\r\\n        uint256 entryID;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IRewardEscrow {\\r\\n    // Views\\r\\n    function getDexToroAddress() external view returns (address);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function numVestingEntries(address account) external view returns (uint256);\\r\\n\\r\\n    function totalEscrowedAccountBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function totalVestedAccountBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getVestingSchedules(\\r\\n        address account,\\r\\n        uint256 index,\\r\\n        uint256 pageSize\\r\\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\\r\\n\\r\\n    function getAccountVestingEntryIDs(\\r\\n        address account,\\r\\n        uint256 index,\\r\\n        uint256 pageSize\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function getVestingEntryClaimable(address account, uint256 entryID)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getVestingEntry(address account, uint256 entryID)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint64,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    // Mutative functions\\r\\n    function vest(uint256[] calldata entryIDs) external;\\r\\n\\r\\n    function createEscrowEntry(\\r\\n        address beneficiary,\\r\\n        uint256 deposit,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function appendVestingEntry(\\r\\n        address account,\\r\\n        uint256 quantity,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function stakeEscrow(uint256 _amount) external;\\r\\n\\r\\n    function unstakeEscrow(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4cf88db8366e6aa6487e90abe6b80bba4b22b6f760721640b8a03bacf518f215\",\"license\":\"MIT\"},\"contracts/utils/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\r\\ncontract Owned {\\r\\n    address public owner;\\r\\n    address public nominatedOwner;\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\r\\n        owner = _owner;\\r\\n        emit OwnerChanged(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function nominateNewOwner(address _owner) external onlyOwner {\\r\\n        nominatedOwner = _owner;\\r\\n        emit OwnerNominated(_owner);\\r\\n    }\\r\\n\\r\\n    function acceptOwnership() external {\\r\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\r\\n        emit OwnerChanged(owner, nominatedOwner);\\r\\n        owner = nominatedOwner;\\r\\n        nominatedOwner = address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _onlyOwner() private view {\\r\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\r\\n    }\\r\\n\\r\\n    event OwnerNominated(address newOwner);\\r\\n    event OwnerChanged(address oldOwner, address newOwner);\\r\\n}\\r\\n\",\"keccak256\":\"0x0c1a85d3544f9b0a883ff8aaf469aec37de38263d82bba0a925212558df4e18f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001c6f38038062001c6f8339818101604052810190620000379190620001cd565b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a19062000275565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c6000826040516200011e929190620002a8565b60405180910390a1508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050620002d5565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001958262000168565b9050919050565b620001a78162000188565b8114620001b357600080fd5b50565b600081519050620001c7816200019c565b92915050565b60008060408385031215620001e757620001e662000163565b5b6000620001f785828601620001b6565b92505060206200020a85828601620001b6565b9150509250929050565b600082825260208201905092915050565b7f4f776e657220616464726573732063616e6e6f74206265203000000000000000600082015250565b60006200025d60198362000214565b91506200026a8262000225565b602082019050919050565b6000602082019050818103600083015262000290816200024e565b9050919050565b620002a28162000188565b82525050565b6000604082019050620002bf600083018562000297565b620002ce602083018462000297565b9392505050565b608051611977620002f8600039600081816106a701526107f601526119776000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ab5943db11610066578063ab5943db14610135578063c02bb7ba14610151578063d0b55e8c1461016d578063f364c90c14610189578063fc0c546a146101b95761009e565b80631627540c146100a357806353a47bb7146100bf57806371c5ecb1146100dd57806379ba50971461010d5780638da5cb5b14610117575b600080fd5b6100bd60048036038101906100b89190610d56565b6101d7565b005b6100c761025a565b6040516100d49190610d92565b60405180910390f35b6100f760048036038101906100f29190610de3565b610280565b6040516101049190610e29565b60405180910390f35b610115610298565b005b61011f610449565b60405161012c9190610d92565b60405180910390f35b61014f600480360381019061014a9190610ea9565b61046d565b005b61016b60048036038101906101669190610f4c565b61057f565b005b61018760048036038101906101829190611012565b610731565b005b6101a3600480360381019061019e9190611052565b61078c565b6040516101b091906110ad565b60405180910390f35b6101c16107f4565b6040516101ce9190610d92565b60405180910390f35b6101df610818565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce228160405161024f9190610d92565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f9061114b565b60405180910390fd5b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161039b92919061116b565b60405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082829050905060005b818110156105795761056e84848381811061049657610495611194565b5b90506020028101906104a891906111d2565b600001358585848181106104bf576104be611194565b5b90506020028101906104d191906111d2565b60200160208101906104e39190610d56565b8686858181106104f6576104f5611194565b5b905060200281019061050891906111d2565b6040013587878681811061051f5761051e611194565b5b905060200281019061053191906111d2565b806060019061054091906111fa565b89898881811061055357610552611194565b5b905060200281019061056591906111d2565b6080013561057f565b806001019050610478565b50505050565b610589868261078c565b156105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c0906112cf565b60405180910390fd5b60008686866040516020016105e093929190611358565b604051602081830303815290604052805190602001209050610657848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506002600085815260200190815260200160002054836108a8565b610696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068d90611407565b60405180910390fd5b6106a087836108bf565b6106eb86867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661093c9092919063ffffffff16565b7fd9cb1e2714d65a111c0f20f060176ad657496bd47a3de04ec7c3d4ca232112ac878787856040516107209493929190611436565b60405180910390a150505050505050565b610739610818565b8160026000838152602001908152602001600020819055507f7835b531ba83151bc18466c9b0ab4b168056cb422098530a34952b03f87ba51981604051610780919061147b565b60405180910390a15050565b6000806101008461079d91906114f4565b90506000610100856107af9190611525565b905060006003600086815260200190815260200160002060008481526020019081526020016000205490506000826001901b9050808183161494505050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d906115c8565b60405180910390fd5b565b6000826108b585846109c2565b1490509392505050565b6000610100836108cf91906114f4565b90506000610100846108e19190611525565b9050806001901b60036000858152602001908152602001600020600084815260200190815260200160002054176003600085815260200190815260200160002060008481526020019081526020016000208190555050505050565b6109bd8363a9059cbb60e01b848460405160240161095b9291906115e8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a18565b505050565b60008082905060005b8451811015610a0d576109f8828683815181106109eb576109ea611194565b5b6020026020010151610adf565b91508080610a0590611611565b9150506109cb565b508091505092915050565b6000610a7a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b0a9092919063ffffffff16565b9050600081511115610ada5780806020019051810190610a9a9190611685565b610ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad090611724565b60405180910390fd5b5b505050565b6000818310610af757610af28284610b22565b610b02565b610b018383610b22565b5b905092915050565b6060610b198484600085610b39565b90509392505050565b600082600052816020526040600020905092915050565b606082471015610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906117b6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610ba79190611847565b60006040518083038185875af1925050503d8060008114610be4576040519150601f19603f3d011682016040523d82523d6000602084013e610be9565b606091505b5091509150610bfa87838387610c06565b92505050949350505050565b60608315610c68576000835103610c6057610c2085610c7b565b610c5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c56906118aa565b60405180910390fd5b5b829050610c73565b610c728383610c9e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610cb15781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce5919061191f565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d2382610cf8565b9050919050565b610d3381610d18565b8114610d3e57600080fd5b50565b600081359050610d5081610d2a565b92915050565b600060208284031215610d6c57610d6b610cee565b5b6000610d7a84828501610d41565b91505092915050565b610d8c81610d18565b82525050565b6000602082019050610da76000830184610d83565b92915050565b6000819050919050565b610dc081610dad565b8114610dcb57600080fd5b50565b600081359050610ddd81610db7565b92915050565b600060208284031215610df957610df8610cee565b5b6000610e0784828501610dce565b91505092915050565b6000819050919050565b610e2381610e10565b82525050565b6000602082019050610e3e6000830184610e1a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e6957610e68610e44565b5b8235905067ffffffffffffffff811115610e8657610e85610e49565b5b602083019150836020820283011115610ea257610ea1610e4e565b5b9250929050565b60008060208385031215610ec057610ebf610cee565b5b600083013567ffffffffffffffff811115610ede57610edd610cf3565b5b610eea85828601610e53565b92509250509250929050565b60008083601f840112610f0c57610f0b610e44565b5b8235905067ffffffffffffffff811115610f2957610f28610e49565b5b602083019150836020820283011115610f4557610f44610e4e565b5b9250929050565b60008060008060008060a08789031215610f6957610f68610cee565b5b6000610f7789828a01610dce565b9650506020610f8889828a01610d41565b9550506040610f9989828a01610dce565b945050606087013567ffffffffffffffff811115610fba57610fb9610cf3565b5b610fc689828a01610ef6565b93509350506080610fd989828a01610dce565b9150509295509295509295565b610fef81610e10565b8114610ffa57600080fd5b50565b60008135905061100c81610fe6565b92915050565b6000806040838503121561102957611028610cee565b5b600061103785828601610ffd565b925050602061104885828601610dce565b9150509250929050565b6000806040838503121561106957611068610cee565b5b600061107785828601610dce565b925050602061108885828601610dce565b9150509250929050565b60008115159050919050565b6110a781611092565b82525050565b60006020820190506110c2600083018461109e565b92915050565b600082825260208201905092915050565b7f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560008201527f2063616e20616363657074206f776e6572736869700000000000000000000000602082015250565b60006111356035836110c8565b9150611140826110d9565b604082019050919050565b6000602082019050818103600083015261116481611128565b9050919050565b60006040820190506111806000830185610d83565b61118d6020830184610d83565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160a0038336030381126111ee576111ed6111c3565b5b80830191505092915050565b60008083356001602003843603038112611217576112166111c3565b5b80840192508235915067ffffffffffffffff821115611239576112386111c8565b5b602083019250602082023603831315611255576112546111cd565b5b509250929050565b7f4d756c7469706c654d65726b6c654469737472696275746f723a2044726f702060008201527f616c726561647920636c61696d65642e00000000000000000000000000000000602082015250565b60006112b96030836110c8565b91506112c48261125d565b604082019050919050565b600060208201905081810360008301526112e8816112ac565b9050919050565b6000819050919050565b61130a61130582610dad565b6112ef565b82525050565b60008160601b9050919050565b600061132882611310565b9050919050565b600061133a8261131d565b9050919050565b61135261134d82610d18565b61132f565b82525050565b600061136482866112f9565b6020820191506113748285611341565b60148201915061138482846112f9565b602082019150819050949350505050565b7f4d756c7469706c654d65726b6c654469737472696275746f723a20496e76616c60008201527f69642070726f6f662e0000000000000000000000000000000000000000000000602082015250565b60006113f16029836110c8565b91506113fc82611395565b604082019050919050565b60006020820190508181036000830152611420816113e4565b9050919050565b61143081610dad565b82525050565b600060808201905061144b6000830187611427565b6114586020830186610d83565b6114656040830185611427565b6114726060830184611427565b95945050505050565b60006020820190506114906000830184611427565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114ff82610dad565b915061150a83610dad565b92508261151a57611519611496565b5b828204905092915050565b600061153082610dad565b915061153b83610dad565b92508261154b5761154a611496565b5b828206905092915050565b7f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660008201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b60006115b2602f836110c8565b91506115bd82611556565b604082019050919050565b600060208201905081810360008301526115e1816115a5565b9050919050565b60006040820190506115fd6000830185610d83565b61160a6020830184611427565b9392505050565b600061161c82610dad565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361164e5761164d6114c5565b5b600182019050919050565b61166281611092565b811461166d57600080fd5b50565b60008151905061167f81611659565b92915050565b60006020828403121561169b5761169a610cee565b5b60006116a984828501611670565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061170e602a836110c8565b9150611719826116b2565b604082019050919050565b6000602082019050818103600083015261173d81611701565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006117a06026836110c8565b91506117ab82611744565b604082019050919050565b600060208201905081810360008301526117cf81611793565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561180a5780820151818401526020810190506117ef565b60008484015250505050565b6000611821826117d6565b61182b81856117e1565b935061183b8185602086016117ec565b80840191505092915050565b60006118538284611816565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611894601d836110c8565b915061189f8261185e565b602082019050919050565b600060208201905081810360008301526118c381611887565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006118f1826118ca565b6118fb81856110c8565b935061190b8185602086016117ec565b611914816118d5565b840191505092915050565b6000602082019050818103600083015261193981846118e6565b90509291505056fea26469706673582212209e9058673b75d7d96baf16d24f5ef1d93e7a4045d292500f6dd839fd3c16684e64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063ab5943db11610066578063ab5943db14610135578063c02bb7ba14610151578063d0b55e8c1461016d578063f364c90c14610189578063fc0c546a146101b95761009e565b80631627540c146100a357806353a47bb7146100bf57806371c5ecb1146100dd57806379ba50971461010d5780638da5cb5b14610117575b600080fd5b6100bd60048036038101906100b89190610d56565b6101d7565b005b6100c761025a565b6040516100d49190610d92565b60405180910390f35b6100f760048036038101906100f29190610de3565b610280565b6040516101049190610e29565b60405180910390f35b610115610298565b005b61011f610449565b60405161012c9190610d92565b60405180910390f35b61014f600480360381019061014a9190610ea9565b61046d565b005b61016b60048036038101906101669190610f4c565b61057f565b005b61018760048036038101906101829190611012565b610731565b005b6101a3600480360381019061019e9190611052565b61078c565b6040516101b091906110ad565b60405180910390f35b6101c16107f4565b6040516101ce9190610d92565b60405180910390f35b6101df610818565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce228160405161024f9190610d92565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f9061114b565b60405180910390fd5b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161039b92919061116b565b60405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600082829050905060005b818110156105795761056e84848381811061049657610495611194565b5b90506020028101906104a891906111d2565b600001358585848181106104bf576104be611194565b5b90506020028101906104d191906111d2565b60200160208101906104e39190610d56565b8686858181106104f6576104f5611194565b5b905060200281019061050891906111d2565b6040013587878681811061051f5761051e611194565b5b905060200281019061053191906111d2565b806060019061054091906111fa565b89898881811061055357610552611194565b5b905060200281019061056591906111d2565b6080013561057f565b806001019050610478565b50505050565b610589868261078c565b156105c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c0906112cf565b60405180910390fd5b60008686866040516020016105e093929190611358565b604051602081830303815290604052805190602001209050610657848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506002600085815260200190815260200160002054836108a8565b610696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068d90611407565b60405180910390fd5b6106a087836108bf565b6106eb86867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661093c9092919063ffffffff16565b7fd9cb1e2714d65a111c0f20f060176ad657496bd47a3de04ec7c3d4ca232112ac878787856040516107209493929190611436565b60405180910390a150505050505050565b610739610818565b8160026000838152602001908152602001600020819055507f7835b531ba83151bc18466c9b0ab4b168056cb422098530a34952b03f87ba51981604051610780919061147b565b60405180910390a15050565b6000806101008461079d91906114f4565b90506000610100856107af9190611525565b905060006003600086815260200190815260200160002060008481526020019081526020016000205490506000826001901b9050808183161494505050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d906115c8565b60405180910390fd5b565b6000826108b585846109c2565b1490509392505050565b6000610100836108cf91906114f4565b90506000610100846108e19190611525565b9050806001901b60036000858152602001908152602001600020600084815260200190815260200160002054176003600085815260200190815260200160002060008481526020019081526020016000208190555050505050565b6109bd8363a9059cbb60e01b848460405160240161095b9291906115e8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a18565b505050565b60008082905060005b8451811015610a0d576109f8828683815181106109eb576109ea611194565b5b6020026020010151610adf565b91508080610a0590611611565b9150506109cb565b508091505092915050565b6000610a7a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b0a9092919063ffffffff16565b9050600081511115610ada5780806020019051810190610a9a9190611685565b610ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad090611724565b60405180910390fd5b5b505050565b6000818310610af757610af28284610b22565b610b02565b610b018383610b22565b5b905092915050565b6060610b198484600085610b39565b90509392505050565b600082600052816020526040600020905092915050565b606082471015610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906117b6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610ba79190611847565b60006040518083038185875af1925050503d8060008114610be4576040519150601f19603f3d011682016040523d82523d6000602084013e610be9565b606091505b5091509150610bfa87838387610c06565b92505050949350505050565b60608315610c68576000835103610c6057610c2085610c7b565b610c5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c56906118aa565b60405180910390fd5b5b829050610c73565b610c728383610c9e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610cb15781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce5919061191f565b60405180910390fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d2382610cf8565b9050919050565b610d3381610d18565b8114610d3e57600080fd5b50565b600081359050610d5081610d2a565b92915050565b600060208284031215610d6c57610d6b610cee565b5b6000610d7a84828501610d41565b91505092915050565b610d8c81610d18565b82525050565b6000602082019050610da76000830184610d83565b92915050565b6000819050919050565b610dc081610dad565b8114610dcb57600080fd5b50565b600081359050610ddd81610db7565b92915050565b600060208284031215610df957610df8610cee565b5b6000610e0784828501610dce565b91505092915050565b6000819050919050565b610e2381610e10565b82525050565b6000602082019050610e3e6000830184610e1a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e6957610e68610e44565b5b8235905067ffffffffffffffff811115610e8657610e85610e49565b5b602083019150836020820283011115610ea257610ea1610e4e565b5b9250929050565b60008060208385031215610ec057610ebf610cee565b5b600083013567ffffffffffffffff811115610ede57610edd610cf3565b5b610eea85828601610e53565b92509250509250929050565b60008083601f840112610f0c57610f0b610e44565b5b8235905067ffffffffffffffff811115610f2957610f28610e49565b5b602083019150836020820283011115610f4557610f44610e4e565b5b9250929050565b60008060008060008060a08789031215610f6957610f68610cee565b5b6000610f7789828a01610dce565b9650506020610f8889828a01610d41565b9550506040610f9989828a01610dce565b945050606087013567ffffffffffffffff811115610fba57610fb9610cf3565b5b610fc689828a01610ef6565b93509350506080610fd989828a01610dce565b9150509295509295509295565b610fef81610e10565b8114610ffa57600080fd5b50565b60008135905061100c81610fe6565b92915050565b6000806040838503121561102957611028610cee565b5b600061103785828601610ffd565b925050602061104885828601610dce565b9150509250929050565b6000806040838503121561106957611068610cee565b5b600061107785828601610dce565b925050602061108885828601610dce565b9150509250929050565b60008115159050919050565b6110a781611092565b82525050565b60006020820190506110c2600083018461109e565b92915050565b600082825260208201905092915050565b7f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560008201527f2063616e20616363657074206f776e6572736869700000000000000000000000602082015250565b60006111356035836110c8565b9150611140826110d9565b604082019050919050565b6000602082019050818103600083015261116481611128565b9050919050565b60006040820190506111806000830185610d83565b61118d6020830184610d83565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008235600160a0038336030381126111ee576111ed6111c3565b5b80830191505092915050565b60008083356001602003843603038112611217576112166111c3565b5b80840192508235915067ffffffffffffffff821115611239576112386111c8565b5b602083019250602082023603831315611255576112546111cd565b5b509250929050565b7f4d756c7469706c654d65726b6c654469737472696275746f723a2044726f702060008201527f616c726561647920636c61696d65642e00000000000000000000000000000000602082015250565b60006112b96030836110c8565b91506112c48261125d565b604082019050919050565b600060208201905081810360008301526112e8816112ac565b9050919050565b6000819050919050565b61130a61130582610dad565b6112ef565b82525050565b60008160601b9050919050565b600061132882611310565b9050919050565b600061133a8261131d565b9050919050565b61135261134d82610d18565b61132f565b82525050565b600061136482866112f9565b6020820191506113748285611341565b60148201915061138482846112f9565b602082019150819050949350505050565b7f4d756c7469706c654d65726b6c654469737472696275746f723a20496e76616c60008201527f69642070726f6f662e0000000000000000000000000000000000000000000000602082015250565b60006113f16029836110c8565b91506113fc82611395565b604082019050919050565b60006020820190508181036000830152611420816113e4565b9050919050565b61143081610dad565b82525050565b600060808201905061144b6000830187611427565b6114586020830186610d83565b6114656040830185611427565b6114726060830184611427565b95945050505050565b60006020820190506114906000830184611427565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114ff82610dad565b915061150a83610dad565b92508261151a57611519611496565b5b828204905092915050565b600061153082610dad565b915061153b83610dad565b92508261154b5761154a611496565b5b828206905092915050565b7f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660008201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b60006115b2602f836110c8565b91506115bd82611556565b604082019050919050565b600060208201905081810360008301526115e1816115a5565b9050919050565b60006040820190506115fd6000830185610d83565b61160a6020830184611427565b9392505050565b600061161c82610dad565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361164e5761164d6114c5565b5b600182019050919050565b61166281611092565b811461166d57600080fd5b50565b60008151905061167f81611659565b92915050565b60006020828403121561169b5761169a610cee565b5b60006116a984828501611670565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061170e602a836110c8565b9150611719826116b2565b604082019050919050565b6000602082019050818103600083015261173d81611701565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006117a06026836110c8565b91506117ab82611744565b604082019050919050565b600060208201905081810360008301526117cf81611793565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561180a5780820151818401526020810190506117ef565b60008484015250505050565b6000611821826117d6565b61182b81856117e1565b935061183b8185602086016117ec565b80840191505092915050565b60006118538284611816565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611894601d836110c8565b915061189f8261185e565b602082019050919050565b600060208201905081810360008301526118c381611887565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006118f1826118ca565b6118fb81856110c8565b935061190b8185602086016117ec565b611914816118d5565b840191505092915050565b6000602082019050818103600083015261193981846118e6565b90509291505056fea26469706673582212209e9058673b75d7d96baf16d24f5ef1d93e7a4045d292500f6dd839fd3c16684e64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256,address,uint256,bytes32[],uint256)": {
        "params": {
          "account": ": address used for escrow entry",
          "amount": ": token amount to be escrowed",
          "epoch": ": distribution index number",
          "index": ": used for merkle tree managment and verification",
          "merkleProof": ": off-chain generated proof of merkle tree inclusion"
        }
      },
      "claimMultiple((uint256,address,uint256,bytes32[],uint256)[])": {
        "params": {
          "claims": ": array of valid claims"
        }
      },
      "constructor": {
        "params": {
          "_owner": ": designated owner of this contract",
          "_token": ": address of erc20 token to be distributed"
        }
      },
      "isClaimed(uint256,uint256)": {
        "params": {
          "epoch": ": distribution index number",
          "index": ": used for claim managment"
        },
        "returns": {
          "_0": "true if indexed claim has been claimed"
        }
      },
      "setMerkleRootForEpoch(bytes32,uint256)": {
        "params": {
          "epoch": ": distribution index number",
          "merkleRoot": ": new merkle root"
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "token to be distributed",
        "returns": {
          "_0": "token to be distributed"
        }
      }
    },
    "title": "DexToro MultipleMerkleDistributor ",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(uint256,address,uint256,uint256)": {
        "notice": "event is triggered whenever a call to `claim` succeeds"
      },
      "MerkleRootModified(uint256)": {
        "notice": "event is triggered whenever a merkle root is set"
      }
    },
    "kind": "user",
    "methods": {
      "claim(uint256,address,uint256,bytes32[],uint256)": {
        "notice": "attempt to claim as `account` and transfer `amount` to `account`"
      },
      "claimMultiple((uint256,address,uint256,bytes32[],uint256)[])": {
        "notice": "function that aggregates multiple claims"
      },
      "constructor": {
        "notice": "set addresses ERC20 contract Establish merkle root for verification"
      },
      "isClaimed(uint256,uint256)": {
        "notice": "determine if indexed claim has been claimed"
      },
      "setMerkleRootForEpoch(bytes32,uint256)": {
        "notice": "modify merkle root for existing distribution epoch"
      }
    },
    "notice": "Facilitates trading incentives distribution over multiple periods.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17880,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17882,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8793,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 8800,
        "contract": "contracts/MultipleMerkleDistributor.sol:MultipleMerkleDistributor",
        "label": "claimedBitMaps",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}