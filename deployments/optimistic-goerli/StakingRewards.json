{
  "address": "0xd3FA2fb74b803768f6CD077A137421Bf796341e7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardEscrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_supplySchedule",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EscrowUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "escrowedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "nonEscrowedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseStakingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEscrow",
      "outputs": [
        {
          "internalType": "contract IRewardEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplySchedule",
      "outputs": [
        {
          "internalType": "contract ISupplySchedule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseStakingRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeEscrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "6f79d3733b7e9dcc5d3a8e37b3ee8002",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_supplySchedule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EscrowUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"escrowedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nonEscrowedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEscrow\",\"outputs\":[{\"internalType\":\"contract IRewardEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplySchedule\",\"outputs\":[{\"internalType\":\"contract ISupplySchedule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"SYNTHETIX, JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\",\"events\":{\"EscrowStaked(address,uint256)\":{\"params\":{\"amount\":\": amount staked\",\"user\":\": owner of escrowed tokens address\"}},\"EscrowUnstaked(address,uint256)\":{\"params\":{\"amount\":\": amount unstaked\",\"user\":\": owner of escrowed tokens address\"}},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Recovered(address,uint256)\":{\"params\":{\"amount\":\": amount of token recovered\",\"token\":\": address of token recovered\"}},\"RewardAdded(uint256)\":{\"params\":{\"reward\":\": amount to be distributed over applicable rewards duration\"}},\"RewardPaid(address,uint256)\":{\"params\":{\"reward\":\": amount of reward token claimed\",\"user\":\": address of user claiming rewards\"}},\"RewardsDurationUpdated(uint256)\":{\"params\":{\"newDuration\":\": denoted in seconds\"}},\"Staked(address,uint256)\":{\"params\":{\"amount\":\": amount staked\",\"user\":\": staker address\"}},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Unstaked(address,uint256)\":{\"params\":{\"amount\":\": amount unstaked\",\"user\":\": address of user unstaking\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"account\":\": address of potential staker\"},\"returns\":{\"_0\":\"amount of tokens staked by account\"}},\"constructor\":{\"details\":\"owner set to address that deployed StakingRewards\",\"params\":{\"_rewardEscrow\":\": escrow contract which holds (and may stake) reward tokens\",\"_supplySchedule\":\": handles reward token minting logic\",\"_token\":\": token used for staking and for rewards\"}},\"earned(address)\":{\"params\":{\"account\":\": address of account earned amount is being calculated for\"}},\"escrowedBalanceOf(address)\":{\"params\":{\"account\":\"address to check the escrowed tokens staked\"},\"returns\":{\"_0\":\"amount of escrowed tokens staked\"}},\"getReward()\":{\"details\":\"rewards are escrowed in RewardEscrowupdateReward() called prior to function logic\"},\"getRewardForDuration()\":{\"returns\":{\"_0\":\"rewards for the duration specified by rewardsDuration\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"timestamp of the last time rewards are applicable\"}},\"nonEscrowedBalanceOf(address)\":{\"params\":{\"account\":\"address to check the non-escrowed tokens staked\"},\"returns\":{\"_0\":\"amount of non-escrowed tokens staked\"}},\"notifyRewardAmount(uint256)\":{\"details\":\"updateReward() called prior to function logic (with zero address)\",\"params\":{\"reward\":\": amount of token to be distributed over a period\"}},\"pauseStakingRewards()\":{\"details\":\"Triggers stopped state\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\": address of token to be recovered\",\"tokenAmount\":\": amount of token to be recovered\"}},\"rewardPerToken()\":{\"returns\":{\"_0\":\"running sum of reward per total tokens staked\"}},\"setRewardsDuration(uint256)\":{\"params\":{\"_rewardsDuration\":\": denoted in seconds\"}},\"stake(uint256)\":{\"details\":\"updateReward() called prior to function logic\",\"params\":{\"amount\":\": amount to stake\"}},\"stakeEscrow(address,uint256)\":{\"details\":\"updateReward() called prior to function logicmsg.sender NOT used (account is used)\",\"params\":{\"account\":\": address which owns token\",\"amount\":\": amount to stake\"}},\"totalSupply()\":{\"details\":\"returns staked tokens which will likely not be equal to total tokens in the contract since reward and staking tokens are the same\",\"returns\":{\"_0\":\"total amount of tokens that are being staked\"}},\"unpauseStakingRewards()\":{\"details\":\"Returns to normal state.\"},\"unstake(uint256)\":{\"details\":\"updateReward() called prior to function logic\",\"params\":{\"amount\":\": amount to unstake\"}},\"unstakeEscrow(address,uint256)\":{\"details\":\"updateReward() called prior to function logicmsg.sender NOT used (account is used)\",\"params\":{\"account\":\": address which owns token\",\"amount\":\": amount to unstake\"}}},\"stateVariables\":{\"balances\":{\"details\":\"this includes escrowed tokens stake\"}},\"title\":\"DTORO Staking Rewards\",\"version\":1},\"userdoc\":{\"events\":{\"EscrowStaked(address,uint256)\":{\"notice\":\"emitted when escrow staked\"},\"EscrowUnstaked(address,uint256)\":{\"notice\":\"emitted when staked escrow tokens are unstaked\"},\"Recovered(address,uint256)\":{\"notice\":\"emitted when tokens are recovered from this contract\"},\"RewardAdded(uint256)\":{\"notice\":\"update reward rate\"},\"RewardPaid(address,uint256)\":{\"notice\":\"emitted when user claims rewards\"},\"RewardsDurationUpdated(uint256)\":{\"notice\":\"emitted when rewards duration changes\"},\"Staked(address,uint256)\":{\"notice\":\"emitted when user stakes tokens\"},\"Unstaked(address,uint256)\":{\"notice\":\"emitted when user unstakes tokens\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"configure StakingRewards state\"},\"earned(address)\":{\"notice\":\"determine how much reward token an account has earned thus far\"},\"escrowedBalanceOf(address)\":{\"notice\":\"Getter function for number of staked escrow tokens\"},\"exit()\":{\"notice\":\"unstake all available staked non-escrowed tokens and claim any rewards\"},\"getReward()\":{\"notice\":\"caller claims any rewards generated from staking\"},\"lastUpdateTime()\":{\"notice\":\"track last time the rewards were updated\"},\"nonEscrowedBalanceOf(address)\":{\"notice\":\"Getter function for number of staked non-escrow tokens\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"configure reward rate\"},\"periodFinish()\":{\"notice\":\"marks applicable reward period finish time\"},\"recoverERC20(address,uint256)\":{\"notice\":\"added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\"},\"rewardEscrow()\":{\"notice\":\"escrow contract which holds (and may stake) reward tokens\"},\"rewardPerToken()\":{\"notice\":\"calculate running sum of reward per total tokens staked at this specific time\"},\"rewardPerTokenStored()\":{\"notice\":\"summation of rewardRate divided by total staked tokens\"},\"rewardRate()\":{\"notice\":\"amount of tokens minted per second\"},\"rewards(address)\":{\"notice\":\"track rewards for a given user which changes when a user stakes, unstakes, or claims rewards\"},\"rewardsDuration()\":{\"notice\":\"period for rewards\"},\"setRewardsDuration(uint256)\":{\"notice\":\"set rewards duration\"},\"stake(uint256)\":{\"notice\":\"stake token\"},\"stakeEscrow(address,uint256)\":{\"notice\":\"stake escrowed token\"},\"supplySchedule()\":{\"notice\":\"handles reward token minting logic\"},\"token()\":{\"notice\":\"token used for BOTH staking and rewards\"},\"unstake(uint256)\":{\"notice\":\"unstake token\"},\"unstakeEscrow(address,uint256)\":{\"notice\":\"unstake escrowed token\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"represents the rewardPerToken value the last time the stake calculated earned() rewards\"}},\"notice\":\"Updated version of Synthetix's StakingRewards with new features specific to DexToro\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewards.sol\":\"StakingRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/StakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"./utils/Owned.sol\\\";\\r\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\r\\nimport \\\"./interfaces/ISupplySchedule.sol\\\";\\r\\nimport \\\"./interfaces/IRewardEscrow.sol\\\";\\r\\n\\r\\n/// @title DTORO Staking Rewards\\r\\n/// @author SYNTHETIX, JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\r\\n/// @notice Updated version of Synthetix's StakingRewards with new features specific\\r\\n/// to DexToro\\r\\ncontract StakingRewards is IStakingRewards, Owned, ReentrancyGuard, Pausable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                CONSTANTS\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice token used for BOTH staking and rewards\\r\\n    IERC20 public immutable token;\\r\\n\\r\\n    /// @notice escrow contract which holds (and may stake) reward tokens\\r\\n    IRewardEscrow public immutable rewardEscrow;\\r\\n\\r\\n    /// @notice handles reward token minting logic\\r\\n    ISupplySchedule public immutable supplySchedule;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                STATE\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice number of tokens staked by address\\r\\n    /// @dev this includes escrowed tokens stake\\r\\n    mapping(address => uint256) private balances;\\r\\n\\r\\n    /// @notice number of staked escrow tokens by address\\r\\n    mapping(address => uint256) private escrowedBalances;\\r\\n\\r\\n    /// @notice total number of tokens staked in this contract\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    /// @notice marks applicable reward period finish time\\r\\n    uint256 public periodFinish = 0;\\r\\n\\r\\n    /// @notice amount of tokens minted per second\\r\\n    uint256 public rewardRate = 0;\\r\\n\\r\\n    /// @notice period for rewards\\r\\n    uint256 public rewardsDuration = 7 days;\\r\\n\\r\\n    /// @notice track last time the rewards were updated\\r\\n    uint256 public lastUpdateTime;\\r\\n\\r\\n    /// @notice summation of rewardRate divided by total staked tokens\\r\\n    uint256 public rewardPerTokenStored;\\r\\n\\r\\n    /// @notice represents the rewardPerToken\\r\\n    /// value the last time the stake calculated earned() rewards\\r\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\r\\n\\r\\n    /// @notice track rewards for a given user which changes when\\r\\n    /// a user stakes, unstakes, or claims rewards\\r\\n    mapping(address => uint256) public rewards;\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                EVENTS\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice update reward rate\\r\\n    /// @param reward: amount to be distributed over applicable rewards duration\\r\\n    event RewardAdded(uint256 reward);\\r\\n\\r\\n    /// @notice emitted when user stakes tokens\\r\\n    /// @param user: staker address\\r\\n    /// @param amount: amount staked\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice emitted when user unstakes tokens\\r\\n    /// @param user: address of user unstaking\\r\\n    /// @param amount: amount unstaked\\r\\n    event Unstaked(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice emitted when escrow staked\\r\\n    /// @param user: owner of escrowed tokens address\\r\\n    /// @param amount: amount staked\\r\\n    event EscrowStaked(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice emitted when staked escrow tokens are unstaked\\r\\n    /// @param user: owner of escrowed tokens address\\r\\n    /// @param amount: amount unstaked\\r\\n    event EscrowUnstaked(address user, uint256 amount);\\r\\n\\r\\n    /// @notice emitted when user claims rewards\\r\\n    /// @param user: address of user claiming rewards\\r\\n    /// @param reward: amount of reward token claimed\\r\\n    event RewardPaid(address indexed user, uint256 reward);\\r\\n\\r\\n    /// @notice emitted when rewards duration changes\\r\\n    /// @param newDuration: denoted in seconds\\r\\n    event RewardsDurationUpdated(uint256 newDuration);\\r\\n\\r\\n    /// @notice emitted when tokens are recovered from this contract\\r\\n    /// @param token: address of token recovered\\r\\n    /// @param amount: amount of token recovered\\r\\n    event Recovered(address token, uint256 amount);\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                AUTH\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice access control modifier for rewardEscrow\\r\\n    modifier onlyRewardEscrow() {\\r\\n        require(\\r\\n            msg.sender == address(rewardEscrow),\\r\\n            \\\"StakingRewards: Only Reward Escrow\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice access control modifier for rewardEscrow\\r\\n    modifier onlySupplySchedule() {\\r\\n        require(\\r\\n            msg.sender == address(supplySchedule),\\r\\n            \\\"StakingRewards: Only Supply Schedule\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            CONSTRUCTOR\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice configure StakingRewards state\\r\\n    /// @dev owner set to address that deployed StakingRewards\\r\\n    /// @param _token: token used for staking and for rewards\\r\\n    /// @param _rewardEscrow: escrow contract which holds (and may stake) reward tokens\\r\\n    /// @param _supplySchedule: handles reward token minting logic\\r\\n    constructor(\\r\\n        address _token,\\r\\n        address _rewardEscrow,\\r\\n        address _supplySchedule\\r\\n    ) Owned(msg.sender) {\\r\\n        // define reward/staking token\\r\\n        token = IERC20(_token);\\r\\n\\r\\n        // define contracts which will interact with StakingRewards\\r\\n        rewardEscrow = IRewardEscrow(_rewardEscrow);\\r\\n        supplySchedule = ISupplySchedule(_supplySchedule);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                VIEWS\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @dev returns staked tokens which will likely not be equal to total tokens\\r\\n    /// in the contract since reward and staking tokens are the same\\r\\n    /// @return total amount of tokens that are being staked\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /// @param account: address of potential staker\\r\\n    /// @return amount of tokens staked by account\\r\\n    function balanceOf(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balances[account];\\r\\n    }\\r\\n\\r\\n    /// @notice Getter function for number of staked escrow tokens\\r\\n    /// @param account address to check the escrowed tokens staked\\r\\n    /// @return amount of escrowed tokens staked\\r\\n    function escrowedBalanceOf(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return escrowedBalances[account];\\r\\n    }\\r\\n\\r\\n    /// @return rewards for the duration specified by rewardsDuration\\r\\n    function getRewardForDuration() external view override returns (uint256) {\\r\\n        return rewardRate * rewardsDuration;\\r\\n    }\\r\\n\\r\\n    /// @notice Getter function for number of staked non-escrow tokens\\r\\n    /// @param account address to check the non-escrowed tokens staked\\r\\n    /// @return amount of non-escrowed tokens staked\\r\\n    function nonEscrowedBalanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return balances[account] - escrowedBalances[account];\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            STAKE/UNSTAKE\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice stake token\\r\\n    /// @param amount: amount to stake\\r\\n    /// @dev updateReward() called prior to function logic\\r\\n    function stake(uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        whenNotPaused\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        require(amount > 0, \\\"StakingRewards: Cannot stake 0\\\");\\r\\n\\r\\n        // update state\\r\\n        _totalSupply += amount;\\r\\n        balances[msg.sender] += amount;\\r\\n\\r\\n        // transfer token to this contract from the caller\\r\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        // emit staking event and index msg.sender\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice unstake token\\r\\n    /// @param amount: amount to unstake\\r\\n    /// @dev updateReward() called prior to function logic\\r\\n    function unstake(uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        nonReentrant\\r\\n        updateReward(msg.sender)\\r\\n    {\\r\\n        require(amount > 0, \\\"StakingRewards: Cannot Unstake 0\\\");\\r\\n        require(\\r\\n            amount <= nonEscrowedBalanceOf(msg.sender),\\r\\n            \\\"StakingRewards: Invalid Amount\\\"\\r\\n        );\\r\\n\\r\\n        // update state\\r\\n        _totalSupply -= amount;\\r\\n        balances[msg.sender] -= amount;\\r\\n\\r\\n        // transfer token from this contract to the caller\\r\\n        token.safeTransfer(msg.sender, amount);\\r\\n\\r\\n        // emit unstake event and index msg.sender\\r\\n        emit Unstaked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice stake escrowed token\\r\\n    /// @param account: address which owns token\\r\\n    /// @param amount: amount to stake\\r\\n    /// @dev updateReward() called prior to function logic\\r\\n    /// @dev msg.sender NOT used (account is used)\\r\\n    function stakeEscrow(address account, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        whenNotPaused\\r\\n        onlyRewardEscrow\\r\\n        updateReward(account)\\r\\n    {\\r\\n        require(amount > 0, \\\"StakingRewards: Cannot stake 0\\\");\\r\\n\\r\\n        // update state\\r\\n        balances[account] += amount;\\r\\n        escrowedBalances[account] += amount;\\r\\n\\r\\n        // updates total supply despite no new staking token being transfered.\\r\\n        // escrowed tokens are locked in RewardEscrow\\r\\n        _totalSupply += amount;\\r\\n\\r\\n        // emit escrow staking event and index _account\\r\\n        emit EscrowStaked(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice unstake escrowed token\\r\\n    /// @param account: address which owns token\\r\\n    /// @param amount: amount to unstake\\r\\n    /// @dev updateReward() called prior to function logic\\r\\n    /// @dev msg.sender NOT used (account is used)\\r\\n    function unstakeEscrow(address account, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        nonReentrant\\r\\n        onlyRewardEscrow\\r\\n        updateReward(account)\\r\\n    {\\r\\n        require(amount > 0, \\\"StakingRewards: Cannot Unstake 0\\\");\\r\\n        require(\\r\\n            escrowedBalances[account] >= amount,\\r\\n            \\\"StakingRewards: Invalid Amount\\\"\\r\\n        );\\r\\n\\r\\n        // update state\\r\\n        balances[account] -= amount;\\r\\n        escrowedBalances[account] -= amount;\\r\\n\\r\\n        // updates total supply despite no new staking token being transfered.\\r\\n        // escrowed tokens are locked in RewardEscrow\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        // emit escrow unstaked event and index account\\r\\n        emit EscrowUnstaked(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice unstake all available staked non-escrowed tokens and\\r\\n    /// claim any rewards\\r\\n    function exit() external override {\\r\\n        unstake(nonEscrowedBalanceOf(msg.sender));\\r\\n        getReward();\\r\\n    }    \\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            CLAIM REWARDS\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice caller claims any rewards generated from staking\\r\\n    /// @dev rewards are escrowed in RewardEscrow\\r\\n    /// @dev updateReward() called prior to function logic\\r\\n    function getReward() public override nonReentrant updateReward(msg.sender) {\\r\\n        uint256 reward = rewards[msg.sender];\\r\\n        if (reward > 0) {\\r\\n            // update state (first)\\r\\n            rewards[msg.sender] = 0;\\r\\n\\r\\n            // transfer token from this contract to the rewardEscrow\\r\\n            // and create a vesting entry for the caller\\r\\n            token.safeTransfer(address(rewardEscrow), reward);\\r\\n            rewardEscrow.appendVestingEntry(msg.sender, reward, 52 weeks);\\r\\n\\r\\n            // emit reward claimed event and index msg.sender\\r\\n            emit RewardPaid(msg.sender, reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                        REWARD UPDATE CALCULATIONS\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice update reward state for the account and contract\\r\\n    /// @param account: address of account which rewards are being updated for\\r\\n    /// @dev contract state not specific to an account will be updated also\\r\\n    modifier updateReward(address account) {\\r\\n        rewardPerTokenStored = rewardPerToken();\\r\\n        lastUpdateTime = lastTimeRewardApplicable();\\r\\n\\r\\n        if (account != address(0)) {\\r\\n            // update amount of rewards a user can claim\\r\\n            rewards[account] = earned(account);\\r\\n\\r\\n            // update reward per token staked AT this given time\\r\\n            // (i.e. when this user is interacting with StakingRewards)\\r\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice calculate running sum of reward per total tokens staked\\r\\n    /// at this specific time\\r\\n    /// @return running sum of reward per total tokens staked\\r\\n    function rewardPerToken() public view override returns (uint256) {\\r\\n        if (_totalSupply == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            rewardPerTokenStored +\\r\\n            (((lastTimeRewardApplicable() - lastUpdateTime) *\\r\\n                rewardRate *\\r\\n                1e18) / (_totalSupply));\\r\\n    }\\r\\n\\r\\n    /// @return timestamp of the last time rewards are applicable\\r\\n    function lastTimeRewardApplicable() public view override returns (uint256) {\\r\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\r\\n    }\\r\\n\\r\\n    /// @notice determine how much reward token an account has earned thus far\\r\\n    /// @param account: address of account earned amount is being calculated for\\r\\n    function earned(address account) public view override returns (uint256) {\\r\\n        return\\r\\n            ((balances[account] *\\r\\n                (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18) +\\r\\n            rewards[account];\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            SETTINGS\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice configure reward rate\\r\\n    /// @param reward: amount of token to be distributed over a period\\r\\n    /// @dev updateReward() called prior to function logic (with zero address)\\r\\n    function notifyRewardAmount(uint256 reward)\\r\\n        external\\r\\n        override\\r\\n        onlySupplySchedule\\r\\n        updateReward(address(0))\\r\\n    {\\r\\n        if (block.timestamp >= periodFinish) {\\r\\n            rewardRate = reward / rewardsDuration;\\r\\n        } else {\\r\\n            uint256 remaining = periodFinish - block.timestamp;\\r\\n            uint256 leftover = remaining * rewardRate;\\r\\n            rewardRate = (reward + leftover) / rewardsDuration;\\r\\n        }\\r\\n\\r\\n        lastUpdateTime = block.timestamp;\\r\\n        periodFinish = block.timestamp + rewardsDuration;\\r\\n        emit RewardAdded(reward);\\r\\n    }\\r\\n\\r\\n    /// @notice set rewards duration\\r\\n    /// @param _rewardsDuration: denoted in seconds\\r\\n    function setRewardsDuration(uint256 _rewardsDuration)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            block.timestamp > periodFinish,\\r\\n            \\\"StakingRewards: Previous rewards period must be complete before changing the duration for the new period\\\"\\r\\n        );\\r\\n        rewardsDuration = _rewardsDuration;\\r\\n        emit RewardsDurationUpdated(rewardsDuration);\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            PAUSABLE\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @dev Triggers stopped state\\r\\n    function pauseStakingRewards() external override onlyOwner {\\r\\n        Pausable._pause();\\r\\n    }\\r\\n\\r\\n    /// @dev Returns to normal state.\\r\\n    function unpauseStakingRewards() external override onlyOwner {\\r\\n        Pausable._unpause();\\r\\n    }\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                            MISCELLANEOUS\\r\\n    ///////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice added to support recovering LP Rewards from other systems\\r\\n    /// such as BAL to be distributed to holders\\r\\n    /// @param tokenAddress: address of token to be recovered\\r\\n    /// @param tokenAmount: amount of token to be recovered\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            tokenAddress != address(token),\\r\\n            \\\"StakingRewards: Cannot unstake the staking token\\\"\\r\\n        );\\r\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\r\\n        emit Recovered(tokenAddress, tokenAmount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0b94488d40d4fa7a922f189e32e7ad294edc637493de76a813bb6852bbb587f\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary VestingEntries {\\r\\n    struct VestingEntry {\\r\\n        uint64 endTime;\\r\\n        uint256 escrowAmount;\\r\\n        uint256 duration;\\r\\n    }\\r\\n    struct VestingEntryWithID {\\r\\n        uint64 endTime;\\r\\n        uint256 escrowAmount;\\r\\n        uint256 entryID;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IRewardEscrow {\\r\\n    // Views\\r\\n    function getDexToroAddress() external view returns (address);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function numVestingEntries(address account) external view returns (uint256);\\r\\n\\r\\n    function totalEscrowedAccountBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function totalVestedAccountBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getVestingSchedules(\\r\\n        address account,\\r\\n        uint256 index,\\r\\n        uint256 pageSize\\r\\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\\r\\n\\r\\n    function getAccountVestingEntryIDs(\\r\\n        address account,\\r\\n        uint256 index,\\r\\n        uint256 pageSize\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function getVestingEntryClaimable(address account, uint256 entryID)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getVestingEntry(address account, uint256 entryID)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint64,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    // Mutative functions\\r\\n    function vest(uint256[] calldata entryIDs) external;\\r\\n\\r\\n    function createEscrowEntry(\\r\\n        address beneficiary,\\r\\n        uint256 deposit,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function appendVestingEntry(\\r\\n        address account,\\r\\n        uint256 quantity,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function stakeEscrow(uint256 _amount) external;\\r\\n\\r\\n    function unstakeEscrow(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4cf88db8366e6aa6487e90abe6b80bba4b22b6f760721640b8a03bacf518f215\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IStakingRewards {\\r\\n    /// VIEWS\\r\\n    // token state\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    // staking state\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function escrowedBalanceOf(address account) external view returns (uint256);\\r\\n    function nonEscrowedBalanceOf(address account) external view returns (uint256);\\r\\n    // rewards\\r\\n    function getRewardForDuration() external view returns (uint256);\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    /// MUTATIVE\\r\\n    // Staking/Unstaking\\r\\n    function stake(uint256 amount) external;\\r\\n    function unstake(uint256 amount) external;\\r\\n    function stakeEscrow(address account, uint256 amount) external;\\r\\n    function unstakeEscrow(address account, uint256 amount) external;\\r\\n    function exit() external;\\r\\n    // claim rewards\\r\\n    function getReward() external;\\r\\n    // settings\\r\\n    function notifyRewardAmount(uint256 reward) external;\\r\\n    function setRewardsDuration(uint256 _rewardsDuration) external;\\r\\n    // pausable\\r\\n    function pauseStakingRewards() external;\\r\\n    function unpauseStakingRewards() external;\\r\\n    // misc.\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9996ee528d6f91c9c2303142b3bedf023bf7692608e2023c868c89c5b0788ace\",\"license\":\"MIT\"},\"contracts/interfaces/ISupplySchedule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.24;\\r\\n\\r\\ninterface ISupplySchedule {\\r\\n    // Views\\r\\n    function mintableSupply() external view returns (uint);\\r\\n\\r\\n    function isMintable() external view returns (bool);\\r\\n\\r\\n    // Mutative functions\\r\\n\\r\\n    function mint() external;\\r\\n\\r\\n    function setTreasuryDiversion(uint _treasuryDiversion) external;\\r\\n\\r\\n    function setTradingRewardsDiversion(uint _tradingRewardsDiversion) external;\\r\\n    \\r\\n    function setStakingRewards(address _stakingRewards) external;\\r\\n\\r\\n    function setTradingRewards(address _tradingRewards) external;\\r\\n}\",\"keccak256\":\"0x01083e86d0be9317e5c5085d2576354241a7a1baceec977f7d0043beb8549b27\",\"license\":\"MIT\"},\"contracts/utils/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\r\\ncontract Owned {\\r\\n    address public owner;\\r\\n    address public nominatedOwner;\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\r\\n        owner = _owner;\\r\\n        emit OwnerChanged(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function nominateNewOwner(address _owner) external onlyOwner {\\r\\n        nominatedOwner = _owner;\\r\\n        emit OwnerNominated(_owner);\\r\\n    }\\r\\n\\r\\n    function acceptOwnership() external {\\r\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\r\\n        emit OwnerChanged(owner, nominatedOwner);\\r\\n        owner = nominatedOwner;\\r\\n        nominatedOwner = address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _onlyOwner() private view {\\r\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\r\\n    }\\r\\n\\r\\n    event OwnerNominated(address newOwner);\\r\\n    event OwnerChanged(address oldOwner, address newOwner);\\r\\n}\\r\\n\",\"keccak256\":\"0x0c1a85d3544f9b0a883ff8aaf469aec37de38263d82bba0a925212558df4e18f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526000600755600060085562093a806009553480156200002257600080fd5b506040516200363a3803806200363a83398181016040528101906200004891906200026a565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000bb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b29062000327565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c6000826040516200012f9291906200035a565b60405180910390a15060016002819055506000600360006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000387565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002328262000205565b9050919050565b620002448162000225565b81146200025057600080fd5b50565b600081519050620002648162000239565b92915050565b60008060006060848603121562000286576200028562000200565b5b6000620002968682870162000253565b9350506020620002a98682870162000253565b9250506040620002bc8682870162000253565b9150509250925092565b600082825260208201905092915050565b7f4f776e657220616464726573732063616e6e6f74206265203000000000000000600082015250565b60006200030f601983620002c6565b91506200031c82620002d7565b602082019050919050565b60006020820190508181036000830152620003428162000300565b9050919050565b620003548162000225565b82525050565b600060408201905062000371600083018562000349565b62000380602083018462000349565b9392505050565b60805160a05160c051613244620003f660003960008181610a9b0152611951015260008181610e4d01528181610eb501528181611413015281816116e001526119830152600081816109f501528181610e6f015281816112a7015281816118b00152611de501526132446000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c806380faa57d1161011a578063c40dd66f116100ad578063cd3daf9d1161007c578063cd3daf9d1461057c578063df136d651461059a578063e9fad8ee146105b8578063ebe2b12b146105c2578063fc0c546a146105e057610205565b8063c40dd66f14610508578063c8f33c9114610526578063c9c7da1614610544578063cc1a378f1461056057610205565b80638da5cb5b116100e95780638da5cb5b14610494578063985134fb146104b2578063a430be6c146104ce578063a694fc3a146104ec57610205565b806380faa57d146104205780638980f11f1461043e57806389997f9a1461045a5780638b8763471461046457610205565b80633c6b16ab1161019d5780635c975abb1161016c5780635c975abb146103a05780636079916f146103be57806370a08231146103c857806379ba5097146103f85780637b0a47ee1461040257610205565b80633c6b16ab1461032c5780633d18b91214610348578063514a16c91461035257806353a47bb71461038257610205565b806318160ddd116101d957806318160ddd146102b65780631c1f78eb146102d45780632e17de78146102f2578063386a95251461030e57610205565b80628cc2621461020a578063057a601b1461023a5780630700037d1461026a5780631627540c1461029a575b600080fd5b610224600480360381019061021f9190612455565b6105fe565b604051610231919061249b565b60405180910390f35b610254600480360381019061024f9190612455565b610700565b604051610261919061249b565b60405180910390f35b610284600480360381019061027f9190612455565b610749565b604051610291919061249b565b60405180910390f35b6102b460048036038101906102af9190612455565b610761565b005b6102be6107e4565b6040516102cb919061249b565b60405180910390f35b6102dc6107ee565b6040516102e9919061249b565b60405180910390f35b61030c600480360381019061030791906124e2565b610805565b005b610316610a93565b604051610323919061249b565b60405180910390f35b610346600480360381019061034191906124e2565b610a99565b005b610350610cca565b005b61036c60048036038101906103679190612455565b610fa1565b604051610379919061249b565b60405180910390f35b61038a611034565b604051610397919061251e565b60405180910390f35b6103a861105a565b6040516103b59190612554565b60405180910390f35b6103c6611071565b005b6103e260048036038101906103dd9190612455565b611083565b6040516103ef919061249b565b60405180910390f35b6104006110cc565b005b61040a61127d565b604051610417919061249b565b60405180910390f35b610428611283565b604051610435919061249b565b60405180910390f35b6104586004803603810190610453919061256f565b61129d565b005b6104626113bb565b005b61047e60048036038101906104799190612455565b6113cd565b60405161048b919061249b565b60405180910390f35b61049c6113e5565b6040516104a9919061251e565b60405180910390f35b6104cc60048036038101906104c7919061256f565b611409565b005b6104d66116de565b6040516104e3919061260e565b60405180910390f35b610506600480360381019061050191906124e2565b611702565b005b61051061194f565b60405161051d919061264a565b60405180910390f35b61052e611973565b60405161053b919061249b565b60405180910390f35b61055e6004803603810190610559919061256f565b611979565b005b61057a600480360381019061057591906124e2565b611cc3565b005b610584611d52565b604051610591919061249b565b60405180910390f35b6105a2611dbc565b6040516105af919061249b565b60405180910390f35b6105c0611dc2565b005b6105ca611ddd565b6040516105d7919061249b565b60405180910390f35b6105e8611de3565b6040516105f59190612686565b60405180910390f35b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610691611d52565b61069b91906126d0565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106e59190612704565b6106ef9190612775565b6106f991906127a6565b9050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d6020528060005260406000206000915090505481565b610769611e07565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22816040516107d9919061251e565b60405180910390a150565b6000600654905090565b60006009546008546108009190612704565b905090565b61080d611e97565b33610816611d52565b600b81905550610824611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108f157610867816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092b90612837565b60405180910390fd5b61093d33610fa1565b82111561097f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610976906128a3565b60405180910390fd5b816006600082825461099191906126d0565b9250508190555081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109e791906126d0565b92505081905550610a3933837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611ee49092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7583604051610a7f919061249b565b60405180910390a250610a90611f6a565b50565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90612935565b60405180910390fd5b6000610b31611d52565b600b81905550610b3f611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c0c57610b82816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6007544210610c2e5760095482610c239190612775565b600881905550610c74565b600042600754610c3e91906126d0565b9050600060085482610c509190612704565b90506009548185610c6191906127a6565b610c6b9190612775565b60088190555050505b42600a8190555060095442610c8991906127a6565b6007819055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d82604051610cbe919061249b565b60405180910390a15050565b610cd2611e97565b33610cdb611d52565b600b81905550610ce9611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610db657610d2c816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610f95576000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610eb37f0000000000000000000000000000000000000000000000000000000000000000827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611ee49092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631bb47b4433836301dfe2006040518463ffffffff1660e01b8152600401610f1493929190612990565b600060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610f8c919061249b565b60405180910390a25b5050610f9f611f6a565b565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461102d91906126d0565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900460ff16905090565b611079611e07565b611081611f74565b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461115c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115390612a39565b60405180910390fd5b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516111cf929190612a59565b60405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60085481565b6000600754421061129657600754611298565b425b905090565b6112a5611e07565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132a90612af4565b60405180910390fd5b61137e60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff16611ee49092919063ffffffff16565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516113af929190612b14565b60405180910390a15050565b6113c3611e07565b6113cb611fd7565b565b600c6020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61141161203a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690612baf565b60405180910390fd5b816114a8611d52565b600b819055506114b6611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611583576114f9816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600082116115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd90612c1b565b60405180910390fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461161591906127a6565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461166b91906127a6565b92505081905550816006600082825461168491906127a6565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f945856e466506640ce955f1ec0de49513761175bad680d8503f7c8d45beabb20836040516116d1919061249b565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61170a611e97565b61171261203a565b3361171b611d52565b600b81905550611729611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146117f65761176c816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211611839576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183090612c1b565b60405180910390fd5b816006600082825461184b91906127a6565b9250508190555081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118a191906127a6565b925050819055506118f53330847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612084909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8360405161193b919061249b565b60405180910390a25061194c611f6a565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5481565b611981611e97565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0690612baf565b60405180910390fd5b81611a18611d52565b600b81905550611a26611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611af357611a69816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211611b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2d90612837565b60405180910390fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611baf906128a3565b60405180910390fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c0791906126d0565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c5d91906126d0565b925050819055508160066000828254611c7691906126d0565b925050819055507fbd0d30ac1729a6f57b09c27c8f39102f2704fbbf708747dcd198e45cf27f52828383604051611cae929190612b14565b60405180910390a150611cbf611f6a565b5050565b611ccb611e07565b6007544211611d0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0690612cf9565b60405180910390fd5b806009819055507ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3600954604051611d47919061249b565b60405180910390a150565b60008060065403611d6757600b549050611db9565b600654670de0b6b3a7640000600854600a54611d81611283565b611d8b91906126d0565b611d959190612704565b611d9f9190612704565b611da99190612775565b600b54611db691906127a6565b90505b90565b600b5481565b611dd3611dce33610fa1565b610805565b611ddb610cca565b565b60075481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8c90612d8b565b60405180910390fd5b565b6002805403611edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed290612df7565b60405180910390fd5b60028081905550565b611f658363a9059cbb60e01b8484604051602401611f03929190612b14565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061210d565b505050565b6001600281905550565b611f7c61203a565b6001600360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611fc06121d4565b604051611fcd919061251e565b60405180910390a1565b611fdf6121dc565b6000600360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6120236121d4565b604051612030919061251e565b60405180910390a1565b61204261105a565b15612082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207990612e63565b60405180910390fd5b565b612107846323b872dd60e01b8585856040516024016120a593929190612e83565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061210d565b50505050565b600061216f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122259092919063ffffffff16565b90506000815111156121cf578080602001905181019061218f9190612ee6565b6121ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c590612f85565b60405180910390fd5b5b505050565b600033905090565b6121e461105a565b612223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221a90612ff1565b60405180910390fd5b565b6060612234848460008561223d565b90509392505050565b606082471015612282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227990613083565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516122ab9190613114565b60006040518083038185875af1925050503d80600081146122e8576040519150601f19603f3d011682016040523d82523d6000602084013e6122ed565b606091505b50915091506122fe8783838761230a565b92505050949350505050565b6060831561236c576000835103612364576123248561237f565b612363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235a90613177565b60405180910390fd5b5b829050612377565b61237683836123a2565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156123b55781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e991906131ec565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612422826123f7565b9050919050565b61243281612417565b811461243d57600080fd5b50565b60008135905061244f81612429565b92915050565b60006020828403121561246b5761246a6123f2565b5b600061247984828501612440565b91505092915050565b6000819050919050565b61249581612482565b82525050565b60006020820190506124b0600083018461248c565b92915050565b6124bf81612482565b81146124ca57600080fd5b50565b6000813590506124dc816124b6565b92915050565b6000602082840312156124f8576124f76123f2565b5b6000612506848285016124cd565b91505092915050565b61251881612417565b82525050565b6000602082019050612533600083018461250f565b92915050565b60008115159050919050565b61254e81612539565b82525050565b60006020820190506125696000830184612545565b92915050565b60008060408385031215612586576125856123f2565b5b600061259485828601612440565b92505060206125a5858286016124cd565b9150509250929050565b6000819050919050565b60006125d46125cf6125ca846123f7565b6125af565b6123f7565b9050919050565b60006125e6826125b9565b9050919050565b60006125f8826125db565b9050919050565b612608816125ed565b82525050565b600060208201905061262360008301846125ff565b92915050565b6000612634826125db565b9050919050565b61264481612629565b82525050565b600060208201905061265f600083018461263b565b92915050565b6000612670826125db565b9050919050565b61268081612665565b82525050565b600060208201905061269b6000830184612677565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126db82612482565b91506126e683612482565b92508282039050818111156126fe576126fd6126a1565b5b92915050565b600061270f82612482565b915061271a83612482565b925082820261272881612482565b9150828204841483151761273f5761273e6126a1565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061278082612482565b915061278b83612482565b92508261279b5761279a612746565b5b828204905092915050565b60006127b182612482565b91506127bc83612482565b92508282019050808211156127d4576127d36126a1565b5b92915050565b600082825260208201905092915050565b7f5374616b696e67526577617264733a2043616e6e6f7420556e7374616b652030600082015250565b60006128216020836127da565b915061282c826127eb565b602082019050919050565b6000602082019050818103600083015261285081612814565b9050919050565b7f5374616b696e67526577617264733a20496e76616c696420416d6f756e740000600082015250565b600061288d601e836127da565b915061289882612857565b602082019050919050565b600060208201905081810360008301526128bc81612880565b9050919050565b7f5374616b696e67526577617264733a204f6e6c7920537570706c79205363686560008201527f64756c6500000000000000000000000000000000000000000000000000000000602082015250565b600061291f6024836127da565b915061292a826128c3565b604082019050919050565b6000602082019050818103600083015261294e81612912565b9050919050565b6000819050919050565b600061297a61297561297084612955565b6125af565b612482565b9050919050565b61298a8161295f565b82525050565b60006060820190506129a5600083018661250f565b6129b2602083018561248c565b6129bf6040830184612981565b949350505050565b7f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560008201527f2063616e20616363657074206f776e6572736869700000000000000000000000602082015250565b6000612a236035836127da565b9150612a2e826129c7565b604082019050919050565b60006020820190508181036000830152612a5281612a16565b9050919050565b6000604082019050612a6e600083018561250f565b612a7b602083018461250f565b9392505050565b7f5374616b696e67526577617264733a2043616e6e6f7420756e7374616b65207460008201527f6865207374616b696e6720746f6b656e00000000000000000000000000000000602082015250565b6000612ade6030836127da565b9150612ae982612a82565b604082019050919050565b60006020820190508181036000830152612b0d81612ad1565b9050919050565b6000604082019050612b29600083018561250f565b612b36602083018461248c565b9392505050565b7f5374616b696e67526577617264733a204f6e6c7920526577617264204573637260008201527f6f77000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b996022836127da565b9150612ba482612b3d565b604082019050919050565b60006020820190508181036000830152612bc881612b8c565b9050919050565b7f5374616b696e67526577617264733a2043616e6e6f74207374616b6520300000600082015250565b6000612c05601e836127da565b9150612c1082612bcf565b602082019050919050565b60006020820190508181036000830152612c3481612bf8565b9050919050565b7f5374616b696e67526577617264733a2050726576696f7573207265776172647360008201527f20706572696f64206d75737420626520636f6d706c657465206265666f72652060208201527f6368616e67696e6720746865206475726174696f6e20666f7220746865206e6560408201527f7720706572696f64000000000000000000000000000000000000000000000000606082015250565b6000612ce36068836127da565b9150612cee82612c3b565b608082019050919050565b60006020820190508181036000830152612d1281612cd6565b9050919050565b7f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660008201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b6000612d75602f836127da565b9150612d8082612d19565b604082019050919050565b60006020820190508181036000830152612da481612d68565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612de1601f836127da565b9150612dec82612dab565b602082019050919050565b60006020820190508181036000830152612e1081612dd4565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612e4d6010836127da565b9150612e5882612e17565b602082019050919050565b60006020820190508181036000830152612e7c81612e40565b9050919050565b6000606082019050612e98600083018661250f565b612ea5602083018561250f565b612eb2604083018461248c565b949350505050565b612ec381612539565b8114612ece57600080fd5b50565b600081519050612ee081612eba565b92915050565b600060208284031215612efc57612efb6123f2565b5b6000612f0a84828501612ed1565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612f6f602a836127da565b9150612f7a82612f13565b604082019050919050565b60006020820190508181036000830152612f9e81612f62565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612fdb6014836127da565b9150612fe682612fa5565b602082019050919050565b6000602082019050818103600083015261300a81612fce565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061306d6026836127da565b915061307882613011565b604082019050919050565b6000602082019050818103600083015261309c81613060565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156130d75780820151818401526020810190506130bc565b60008484015250505050565b60006130ee826130a3565b6130f881856130ae565b93506131088185602086016130b9565b80840191505092915050565b600061312082846130e3565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613161601d836127da565b915061316c8261312b565b602082019050919050565b6000602082019050818103600083015261319081613154565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006131be82613197565b6131c881856127da565b93506131d88185602086016130b9565b6131e1816131a2565b840191505092915050565b6000602082019050818103600083015261320681846131b3565b90509291505056fea2646970667358221220e82d80940f55671963860b4f70faeeaf484ffac475d14da145b0edaef017532464736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102055760003560e01c806380faa57d1161011a578063c40dd66f116100ad578063cd3daf9d1161007c578063cd3daf9d1461057c578063df136d651461059a578063e9fad8ee146105b8578063ebe2b12b146105c2578063fc0c546a146105e057610205565b8063c40dd66f14610508578063c8f33c9114610526578063c9c7da1614610544578063cc1a378f1461056057610205565b80638da5cb5b116100e95780638da5cb5b14610494578063985134fb146104b2578063a430be6c146104ce578063a694fc3a146104ec57610205565b806380faa57d146104205780638980f11f1461043e57806389997f9a1461045a5780638b8763471461046457610205565b80633c6b16ab1161019d5780635c975abb1161016c5780635c975abb146103a05780636079916f146103be57806370a08231146103c857806379ba5097146103f85780637b0a47ee1461040257610205565b80633c6b16ab1461032c5780633d18b91214610348578063514a16c91461035257806353a47bb71461038257610205565b806318160ddd116101d957806318160ddd146102b65780631c1f78eb146102d45780632e17de78146102f2578063386a95251461030e57610205565b80628cc2621461020a578063057a601b1461023a5780630700037d1461026a5780631627540c1461029a575b600080fd5b610224600480360381019061021f9190612455565b6105fe565b604051610231919061249b565b60405180910390f35b610254600480360381019061024f9190612455565b610700565b604051610261919061249b565b60405180910390f35b610284600480360381019061027f9190612455565b610749565b604051610291919061249b565b60405180910390f35b6102b460048036038101906102af9190612455565b610761565b005b6102be6107e4565b6040516102cb919061249b565b60405180910390f35b6102dc6107ee565b6040516102e9919061249b565b60405180910390f35b61030c600480360381019061030791906124e2565b610805565b005b610316610a93565b604051610323919061249b565b60405180910390f35b610346600480360381019061034191906124e2565b610a99565b005b610350610cca565b005b61036c60048036038101906103679190612455565b610fa1565b604051610379919061249b565b60405180910390f35b61038a611034565b604051610397919061251e565b60405180910390f35b6103a861105a565b6040516103b59190612554565b60405180910390f35b6103c6611071565b005b6103e260048036038101906103dd9190612455565b611083565b6040516103ef919061249b565b60405180910390f35b6104006110cc565b005b61040a61127d565b604051610417919061249b565b60405180910390f35b610428611283565b604051610435919061249b565b60405180910390f35b6104586004803603810190610453919061256f565b61129d565b005b6104626113bb565b005b61047e60048036038101906104799190612455565b6113cd565b60405161048b919061249b565b60405180910390f35b61049c6113e5565b6040516104a9919061251e565b60405180910390f35b6104cc60048036038101906104c7919061256f565b611409565b005b6104d66116de565b6040516104e3919061260e565b60405180910390f35b610506600480360381019061050191906124e2565b611702565b005b61051061194f565b60405161051d919061264a565b60405180910390f35b61052e611973565b60405161053b919061249b565b60405180910390f35b61055e6004803603810190610559919061256f565b611979565b005b61057a600480360381019061057591906124e2565b611cc3565b005b610584611d52565b604051610591919061249b565b60405180910390f35b6105a2611dbc565b6040516105af919061249b565b60405180910390f35b6105c0611dc2565b005b6105ca611ddd565b6040516105d7919061249b565b60405180910390f35b6105e8611de3565b6040516105f59190612686565b60405180910390f35b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054670de0b6b3a7640000600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610691611d52565b61069b91906126d0565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106e59190612704565b6106ef9190612775565b6106f991906127a6565b9050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600d6020528060005260406000206000915090505481565b610769611e07565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce22816040516107d9919061251e565b60405180910390a150565b6000600654905090565b60006009546008546108009190612704565b905090565b61080d611e97565b33610816611d52565b600b81905550610824611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108f157610867816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092b90612837565b60405180910390fd5b61093d33610fa1565b82111561097f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610976906128a3565b60405180910390fd5b816006600082825461099191906126d0565b9250508190555081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109e791906126d0565b92505081905550610a3933837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611ee49092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7583604051610a7f919061249b565b60405180910390a250610a90611f6a565b50565b60095481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90612935565b60405180910390fd5b6000610b31611d52565b600b81905550610b3f611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c0c57610b82816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6007544210610c2e5760095482610c239190612775565b600881905550610c74565b600042600754610c3e91906126d0565b9050600060085482610c509190612704565b90506009548185610c6191906127a6565b610c6b9190612775565b60088190555050505b42600a8190555060095442610c8991906127a6565b6007819055507fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d82604051610cbe919061249b565b60405180910390a15050565b610cd2611e97565b33610cdb611d52565b600b81905550610ce9611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610db657610d2c816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115610f95576000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610eb37f0000000000000000000000000000000000000000000000000000000000000000827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611ee49092919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631bb47b4433836301dfe2006040518463ffffffff1660e01b8152600401610f1493929190612990565b600060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610f8c919061249b565b60405180910390a25b5050610f9f611f6a565b565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461102d91906126d0565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900460ff16905090565b611079611e07565b611081611f74565b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461115c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115390612a39565b60405180910390fd5b7fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516111cf929190612a59565b60405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60085481565b6000600754421061129657600754611298565b425b905090565b6112a5611e07565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132a90612af4565b60405180910390fd5b61137e60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff16611ee49092919063ffffffff16565b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516113af929190612b14565b60405180910390a15050565b6113c3611e07565b6113cb611fd7565b565b600c6020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61141161203a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690612baf565b60405180910390fd5b816114a8611d52565b600b819055506114b6611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611583576114f9816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600082116115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd90612c1b565b60405180910390fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461161591906127a6565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461166b91906127a6565b92505081905550816006600082825461168491906127a6565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f945856e466506640ce955f1ec0de49513761175bad680d8503f7c8d45beabb20836040516116d1919061249b565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61170a611e97565b61171261203a565b3361171b611d52565b600b81905550611729611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146117f65761176c816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211611839576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183090612c1b565b60405180910390fd5b816006600082825461184b91906127a6565b9250508190555081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118a191906127a6565b925050819055506118f53330847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612084909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8360405161193b919061249b565b60405180910390a25061194c611f6a565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600a5481565b611981611e97565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0690612baf565b60405180910390fd5b81611a18611d52565b600b81905550611a26611283565b600a81905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611af357611a69816105fe565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600b54600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b60008211611b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2d90612837565b60405180910390fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611baf906128a3565b60405180910390fd5b81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c0791906126d0565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c5d91906126d0565b925050819055508160066000828254611c7691906126d0565b925050819055507fbd0d30ac1729a6f57b09c27c8f39102f2704fbbf708747dcd198e45cf27f52828383604051611cae929190612b14565b60405180910390a150611cbf611f6a565b5050565b611ccb611e07565b6007544211611d0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0690612cf9565b60405180910390fd5b806009819055507ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3600954604051611d47919061249b565b60405180910390a150565b60008060065403611d6757600b549050611db9565b600654670de0b6b3a7640000600854600a54611d81611283565b611d8b91906126d0565b611d959190612704565b611d9f9190612704565b611da99190612775565b600b54611db691906127a6565b90505b90565b600b5481565b611dd3611dce33610fa1565b610805565b611ddb610cca565b565b60075481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8c90612d8b565b60405180910390fd5b565b6002805403611edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed290612df7565b60405180910390fd5b60028081905550565b611f658363a9059cbb60e01b8484604051602401611f03929190612b14565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061210d565b505050565b6001600281905550565b611f7c61203a565b6001600360006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611fc06121d4565b604051611fcd919061251e565b60405180910390a1565b611fdf6121dc565b6000600360006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6120236121d4565b604051612030919061251e565b60405180910390a1565b61204261105a565b15612082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207990612e63565b60405180910390fd5b565b612107846323b872dd60e01b8585856040516024016120a593929190612e83565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061210d565b50505050565b600061216f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122259092919063ffffffff16565b90506000815111156121cf578080602001905181019061218f9190612ee6565b6121ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c590612f85565b60405180910390fd5b5b505050565b600033905090565b6121e461105a565b612223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221a90612ff1565b60405180910390fd5b565b6060612234848460008561223d565b90509392505050565b606082471015612282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227990613083565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516122ab9190613114565b60006040518083038185875af1925050503d80600081146122e8576040519150601f19603f3d011682016040523d82523d6000602084013e6122ed565b606091505b50915091506122fe8783838761230a565b92505050949350505050565b6060831561236c576000835103612364576123248561237f565b612363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235a90613177565b60405180910390fd5b5b829050612377565b61237683836123a2565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156123b55781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e991906131ec565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612422826123f7565b9050919050565b61243281612417565b811461243d57600080fd5b50565b60008135905061244f81612429565b92915050565b60006020828403121561246b5761246a6123f2565b5b600061247984828501612440565b91505092915050565b6000819050919050565b61249581612482565b82525050565b60006020820190506124b0600083018461248c565b92915050565b6124bf81612482565b81146124ca57600080fd5b50565b6000813590506124dc816124b6565b92915050565b6000602082840312156124f8576124f76123f2565b5b6000612506848285016124cd565b91505092915050565b61251881612417565b82525050565b6000602082019050612533600083018461250f565b92915050565b60008115159050919050565b61254e81612539565b82525050565b60006020820190506125696000830184612545565b92915050565b60008060408385031215612586576125856123f2565b5b600061259485828601612440565b92505060206125a5858286016124cd565b9150509250929050565b6000819050919050565b60006125d46125cf6125ca846123f7565b6125af565b6123f7565b9050919050565b60006125e6826125b9565b9050919050565b60006125f8826125db565b9050919050565b612608816125ed565b82525050565b600060208201905061262360008301846125ff565b92915050565b6000612634826125db565b9050919050565b61264481612629565b82525050565b600060208201905061265f600083018461263b565b92915050565b6000612670826125db565b9050919050565b61268081612665565b82525050565b600060208201905061269b6000830184612677565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126db82612482565b91506126e683612482565b92508282039050818111156126fe576126fd6126a1565b5b92915050565b600061270f82612482565b915061271a83612482565b925082820261272881612482565b9150828204841483151761273f5761273e6126a1565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061278082612482565b915061278b83612482565b92508261279b5761279a612746565b5b828204905092915050565b60006127b182612482565b91506127bc83612482565b92508282019050808211156127d4576127d36126a1565b5b92915050565b600082825260208201905092915050565b7f5374616b696e67526577617264733a2043616e6e6f7420556e7374616b652030600082015250565b60006128216020836127da565b915061282c826127eb565b602082019050919050565b6000602082019050818103600083015261285081612814565b9050919050565b7f5374616b696e67526577617264733a20496e76616c696420416d6f756e740000600082015250565b600061288d601e836127da565b915061289882612857565b602082019050919050565b600060208201905081810360008301526128bc81612880565b9050919050565b7f5374616b696e67526577617264733a204f6e6c7920537570706c79205363686560008201527f64756c6500000000000000000000000000000000000000000000000000000000602082015250565b600061291f6024836127da565b915061292a826128c3565b604082019050919050565b6000602082019050818103600083015261294e81612912565b9050919050565b6000819050919050565b600061297a61297561297084612955565b6125af565b612482565b9050919050565b61298a8161295f565b82525050565b60006060820190506129a5600083018661250f565b6129b2602083018561248c565b6129bf6040830184612981565b949350505050565b7f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560008201527f2063616e20616363657074206f776e6572736869700000000000000000000000602082015250565b6000612a236035836127da565b9150612a2e826129c7565b604082019050919050565b60006020820190508181036000830152612a5281612a16565b9050919050565b6000604082019050612a6e600083018561250f565b612a7b602083018461250f565b9392505050565b7f5374616b696e67526577617264733a2043616e6e6f7420756e7374616b65207460008201527f6865207374616b696e6720746f6b656e00000000000000000000000000000000602082015250565b6000612ade6030836127da565b9150612ae982612a82565b604082019050919050565b60006020820190508181036000830152612b0d81612ad1565b9050919050565b6000604082019050612b29600083018561250f565b612b36602083018461248c565b9392505050565b7f5374616b696e67526577617264733a204f6e6c7920526577617264204573637260008201527f6f77000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b996022836127da565b9150612ba482612b3d565b604082019050919050565b60006020820190508181036000830152612bc881612b8c565b9050919050565b7f5374616b696e67526577617264733a2043616e6e6f74207374616b6520300000600082015250565b6000612c05601e836127da565b9150612c1082612bcf565b602082019050919050565b60006020820190508181036000830152612c3481612bf8565b9050919050565b7f5374616b696e67526577617264733a2050726576696f7573207265776172647360008201527f20706572696f64206d75737420626520636f6d706c657465206265666f72652060208201527f6368616e67696e6720746865206475726174696f6e20666f7220746865206e6560408201527f7720706572696f64000000000000000000000000000000000000000000000000606082015250565b6000612ce36068836127da565b9150612cee82612c3b565b608082019050919050565b60006020820190508181036000830152612d1281612cd6565b9050919050565b7f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660008201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b6000612d75602f836127da565b9150612d8082612d19565b604082019050919050565b60006020820190508181036000830152612da481612d68565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612de1601f836127da565b9150612dec82612dab565b602082019050919050565b60006020820190508181036000830152612e1081612dd4565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612e4d6010836127da565b9150612e5882612e17565b602082019050919050565b60006020820190508181036000830152612e7c81612e40565b9050919050565b6000606082019050612e98600083018661250f565b612ea5602083018561250f565b612eb2604083018461248c565b949350505050565b612ec381612539565b8114612ece57600080fd5b50565b600081519050612ee081612eba565b92915050565b600060208284031215612efc57612efb6123f2565b5b6000612f0a84828501612ed1565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612f6f602a836127da565b9150612f7a82612f13565b604082019050919050565b60006020820190508181036000830152612f9e81612f62565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000612fdb6014836127da565b9150612fe682612fa5565b602082019050919050565b6000602082019050818103600083015261300a81612fce565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061306d6026836127da565b915061307882613011565b604082019050919050565b6000602082019050818103600083015261309c81613060565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156130d75780820151818401526020810190506130bc565b60008484015250505050565b60006130ee826130a3565b6130f881856130ae565b93506131088185602086016130b9565b80840191505092915050565b600061312082846130e3565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613161601d836127da565b915061316c8261312b565b602082019050919050565b6000602082019050818103600083015261319081613154565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006131be82613197565b6131c881856127da565b93506131d88185602086016130b9565b6131e1816131a2565b840191505092915050565b6000602082019050818103600083015261320681846131b3565b90509291505056fea2646970667358221220e82d80940f55671963860b4f70faeeaf484ffac475d14da145b0edaef017532464736f6c63430008130033",
  "devdoc": {
    "author": "SYNTHETIX, JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)",
    "events": {
      "EscrowStaked(address,uint256)": {
        "params": {
          "amount": ": amount staked",
          "user": ": owner of escrowed tokens address"
        }
      },
      "EscrowUnstaked(address,uint256)": {
        "params": {
          "amount": ": amount unstaked",
          "user": ": owner of escrowed tokens address"
        }
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Recovered(address,uint256)": {
        "params": {
          "amount": ": amount of token recovered",
          "token": ": address of token recovered"
        }
      },
      "RewardAdded(uint256)": {
        "params": {
          "reward": ": amount to be distributed over applicable rewards duration"
        }
      },
      "RewardPaid(address,uint256)": {
        "params": {
          "reward": ": amount of reward token claimed",
          "user": ": address of user claiming rewards"
        }
      },
      "RewardsDurationUpdated(uint256)": {
        "params": {
          "newDuration": ": denoted in seconds"
        }
      },
      "Staked(address,uint256)": {
        "params": {
          "amount": ": amount staked",
          "user": ": staker address"
        }
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Unstaked(address,uint256)": {
        "params": {
          "amount": ": amount unstaked",
          "user": ": address of user unstaking"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "account": ": address of potential staker"
        },
        "returns": {
          "_0": "amount of tokens staked by account"
        }
      },
      "constructor": {
        "details": "owner set to address that deployed StakingRewards",
        "params": {
          "_rewardEscrow": ": escrow contract which holds (and may stake) reward tokens",
          "_supplySchedule": ": handles reward token minting logic",
          "_token": ": token used for staking and for rewards"
        }
      },
      "earned(address)": {
        "params": {
          "account": ": address of account earned amount is being calculated for"
        }
      },
      "escrowedBalanceOf(address)": {
        "params": {
          "account": "address to check the escrowed tokens staked"
        },
        "returns": {
          "_0": "amount of escrowed tokens staked"
        }
      },
      "getReward()": {
        "details": "rewards are escrowed in RewardEscrowupdateReward() called prior to function logic"
      },
      "getRewardForDuration()": {
        "returns": {
          "_0": "rewards for the duration specified by rewardsDuration"
        }
      },
      "lastTimeRewardApplicable()": {
        "returns": {
          "_0": "timestamp of the last time rewards are applicable"
        }
      },
      "nonEscrowedBalanceOf(address)": {
        "params": {
          "account": "address to check the non-escrowed tokens staked"
        },
        "returns": {
          "_0": "amount of non-escrowed tokens staked"
        }
      },
      "notifyRewardAmount(uint256)": {
        "details": "updateReward() called prior to function logic (with zero address)",
        "params": {
          "reward": ": amount of token to be distributed over a period"
        }
      },
      "pauseStakingRewards()": {
        "details": "Triggers stopped state"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": ": address of token to be recovered",
          "tokenAmount": ": amount of token to be recovered"
        }
      },
      "rewardPerToken()": {
        "returns": {
          "_0": "running sum of reward per total tokens staked"
        }
      },
      "setRewardsDuration(uint256)": {
        "params": {
          "_rewardsDuration": ": denoted in seconds"
        }
      },
      "stake(uint256)": {
        "details": "updateReward() called prior to function logic",
        "params": {
          "amount": ": amount to stake"
        }
      },
      "stakeEscrow(address,uint256)": {
        "details": "updateReward() called prior to function logicmsg.sender NOT used (account is used)",
        "params": {
          "account": ": address which owns token",
          "amount": ": amount to stake"
        }
      },
      "totalSupply()": {
        "details": "returns staked tokens which will likely not be equal to total tokens in the contract since reward and staking tokens are the same",
        "returns": {
          "_0": "total amount of tokens that are being staked"
        }
      },
      "unpauseStakingRewards()": {
        "details": "Returns to normal state."
      },
      "unstake(uint256)": {
        "details": "updateReward() called prior to function logic",
        "params": {
          "amount": ": amount to unstake"
        }
      },
      "unstakeEscrow(address,uint256)": {
        "details": "updateReward() called prior to function logicmsg.sender NOT used (account is used)",
        "params": {
          "account": ": address which owns token",
          "amount": ": amount to unstake"
        }
      }
    },
    "stateVariables": {
      "balances": {
        "details": "this includes escrowed tokens stake"
      }
    },
    "title": "DTORO Staking Rewards",
    "version": 1
  },
  "userdoc": {
    "events": {
      "EscrowStaked(address,uint256)": {
        "notice": "emitted when escrow staked"
      },
      "EscrowUnstaked(address,uint256)": {
        "notice": "emitted when staked escrow tokens are unstaked"
      },
      "Recovered(address,uint256)": {
        "notice": "emitted when tokens are recovered from this contract"
      },
      "RewardAdded(uint256)": {
        "notice": "update reward rate"
      },
      "RewardPaid(address,uint256)": {
        "notice": "emitted when user claims rewards"
      },
      "RewardsDurationUpdated(uint256)": {
        "notice": "emitted when rewards duration changes"
      },
      "Staked(address,uint256)": {
        "notice": "emitted when user stakes tokens"
      },
      "Unstaked(address,uint256)": {
        "notice": "emitted when user unstakes tokens"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "configure StakingRewards state"
      },
      "earned(address)": {
        "notice": "determine how much reward token an account has earned thus far"
      },
      "escrowedBalanceOf(address)": {
        "notice": "Getter function for number of staked escrow tokens"
      },
      "exit()": {
        "notice": "unstake all available staked non-escrowed tokens and claim any rewards"
      },
      "getReward()": {
        "notice": "caller claims any rewards generated from staking"
      },
      "lastUpdateTime()": {
        "notice": "track last time the rewards were updated"
      },
      "nonEscrowedBalanceOf(address)": {
        "notice": "Getter function for number of staked non-escrow tokens"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "configure reward rate"
      },
      "periodFinish()": {
        "notice": "marks applicable reward period finish time"
      },
      "recoverERC20(address,uint256)": {
        "notice": "added to support recovering LP Rewards from other systems such as BAL to be distributed to holders"
      },
      "rewardEscrow()": {
        "notice": "escrow contract which holds (and may stake) reward tokens"
      },
      "rewardPerToken()": {
        "notice": "calculate running sum of reward per total tokens staked at this specific time"
      },
      "rewardPerTokenStored()": {
        "notice": "summation of rewardRate divided by total staked tokens"
      },
      "rewardRate()": {
        "notice": "amount of tokens minted per second"
      },
      "rewards(address)": {
        "notice": "track rewards for a given user which changes when a user stakes, unstakes, or claims rewards"
      },
      "rewardsDuration()": {
        "notice": "period for rewards"
      },
      "setRewardsDuration(uint256)": {
        "notice": "set rewards duration"
      },
      "stake(uint256)": {
        "notice": "stake token"
      },
      "stakeEscrow(address,uint256)": {
        "notice": "stake escrowed token"
      },
      "supplySchedule()": {
        "notice": "handles reward token minting logic"
      },
      "token()": {
        "notice": "token used for BOTH staking and rewards"
      },
      "unstake(uint256)": {
        "notice": "unstake token"
      },
      "unstakeEscrow(address,uint256)": {
        "notice": "unstake escrowed token"
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "represents the rewardPerToken value the last time the stake calculated earned() rewards"
      }
    },
    "notice": "Updated version of Synthetix's StakingRewards with new features specific to DexToro",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17880,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17882,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4814,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4713,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 11538,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11543,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "escrowedBalances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11546,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11550,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "periodFinish",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11554,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardRate",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11558,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11561,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 11564,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 11569,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11574,
        "contract": "contracts/StakingRewards.sol:StakingRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}