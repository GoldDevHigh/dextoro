{
  "address": "0x5F5a8203b37558D392898BB4e51B7d6Cb0Db311C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dextoroAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardEscrowAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAccounts",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "durationWeeks",
          "type": "uint256"
        }
      ],
      "name": "BatchEscrowed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "dextoro",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "durationWeeks",
          "type": "uint256"
        }
      ],
      "name": "distributeEscrowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEscrow",
      "outputs": [
        {
          "internalType": "contract IRewardEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "02850ed804265dc054109db0f6b1fe3b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dextoroAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardEscrowAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAccounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationWeeks\",\"type\":\"uint256\"}],\"name\":\"BatchEscrowed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"dextoro\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"durationWeeks\",\"type\":\"uint256\"}],\"name\":\"distributeEscrowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEscrow\",\"outputs\":[{\"internalType\":\"contract IRewardEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"distributeEscrowed(address[],uint256[],uint256)\":{\"details\":\"required to approve this contract address to spend senders tokens before calling\",\"params\":{\"accounts\":\": list of accounts to escrow\",\"amounts\":\": corresponding list of amounts to escrow\",\"durationWeeks\":\": number of weeks to escrow\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dextoro()\":{\"notice\":\"dextoro token contract\"},\"distributeEscrowed(address[],uint256[],uint256)\":{\"notice\":\"Set escrow amounts in batches.\"},\"rewardEscrow()\":{\"notice\":\"rewards escrow contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EscrowDistributor.sol\":\"EscrowDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/EscrowDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IRewardEscrow.sol\\\";\\r\\n\\r\\ncontract EscrowDistributor {\\r\\n    /// @notice rewards escrow contract\\r\\n    IRewardEscrow public immutable rewardEscrow;\\r\\n\\r\\n    /// @notice dextoro token contract\\r\\n    IERC20 public immutable dextoro;\\r\\n\\r\\n    event BatchEscrowed(\\r\\n        uint256 totalAccounts,\\r\\n        uint256 totalTokens,\\r\\n        uint256 durationWeeks\\r\\n    );\\r\\n\\r\\n    constructor(address dextoroAddr, address rewardEscrowAddr) {\\r\\n        dextoro = IERC20(dextoroAddr);\\r\\n        rewardEscrow = IRewardEscrow(rewardEscrowAddr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set escrow amounts in batches.\\r\\n     * @dev required to approve this contract address to spend senders tokens before calling\\r\\n     * @param accounts: list of accounts to escrow\\r\\n     * @param amounts: corresponding list of amounts to escrow\\r\\n     * @param durationWeeks: number of weeks to escrow\\r\\n     */\\r\\n    function distributeEscrowed(\\r\\n        address[] calldata accounts,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 durationWeeks\\r\\n    ) external {\\r\\n        require(\\r\\n            accounts.length == amounts.length,\\r\\n            \\\"Number of accounts does not match number of values\\\"\\r\\n        );\\r\\n\\r\\n        uint256 length = accounts.length;\\r\\n        uint256 totalTokens;\\r\\n        uint256 duration = durationWeeks * 1 weeks;\\r\\n\\r\\n        do {\\r\\n            unchecked {\\r\\n                --length;\\r\\n            }\\r\\n            totalTokens += amounts[length];\\r\\n        } while (length != 0);\\r\\n\\r\\n        dextoro.transferFrom(msg.sender, address(this), totalTokens);\\r\\n        dextoro.approve(address(rewardEscrow), totalTokens);\\r\\n\\r\\n        length = accounts.length;\\r\\n\\r\\n        do {\\r\\n            unchecked {\\r\\n                --length;\\r\\n            }\\r\\n            rewardEscrow.createEscrowEntry(\\r\\n                accounts[length],\\r\\n                amounts[length],\\r\\n                duration\\r\\n            );\\r\\n        } while (length != 0);\\r\\n\\r\\n        emit BatchEscrowed({\\r\\n            totalAccounts: accounts.length,\\r\\n            totalTokens: totalTokens,\\r\\n            durationWeeks: duration\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc2fa6f1c9962ed9a7e05c5b224ae495c3e74f63c0ccc38e401749a04cdaac362\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary VestingEntries {\\r\\n    struct VestingEntry {\\r\\n        uint64 endTime;\\r\\n        uint256 escrowAmount;\\r\\n        uint256 duration;\\r\\n    }\\r\\n    struct VestingEntryWithID {\\r\\n        uint64 endTime;\\r\\n        uint256 escrowAmount;\\r\\n        uint256 entryID;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IRewardEscrow {\\r\\n    // Views\\r\\n    function getDexToroAddress() external view returns (address);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function numVestingEntries(address account) external view returns (uint256);\\r\\n\\r\\n    function totalEscrowedAccountBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function totalVestedAccountBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getVestingSchedules(\\r\\n        address account,\\r\\n        uint256 index,\\r\\n        uint256 pageSize\\r\\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\\r\\n\\r\\n    function getAccountVestingEntryIDs(\\r\\n        address account,\\r\\n        uint256 index,\\r\\n        uint256 pageSize\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function getVestingEntryClaimable(address account, uint256 entryID)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getVestingEntry(address account, uint256 entryID)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint64,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    // Mutative functions\\r\\n    function vest(uint256[] calldata entryIDs) external;\\r\\n\\r\\n    function createEscrowEntry(\\r\\n        address beneficiary,\\r\\n        uint256 deposit,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function appendVestingEntry(\\r\\n        address account,\\r\\n        uint256 quantity,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function stakeEscrow(uint256 _amount) external;\\r\\n\\r\\n    function unstakeEscrow(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4cf88db8366e6aa6487e90abe6b80bba4b22b6f760721640b8a03bacf518f215\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516106e33803806106e383398101604081905261002f91610062565b6001600160a01b0391821660a05216608052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a05161060f6100d46000396000818160a3015281816101dc01526102b10152600081816060015281816102820152610334015261060f6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635837b63d14610046578063a430be6c1461005b578063cdb61fdd1461009e575b600080fd5b6100596100543660046104b7565b6100c5565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100827f000000000000000000000000000000000000000000000000000000000000000081565b838214610158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4e756d626572206f66206163636f756e747320646f6573206e6f74206d61746360448201527f68206e756d626572206f662076616c7565730000000000000000000000000000606482015260840160405180910390fd5b836000806101698462093a80610541565b90505b600019909201918585848181106101855761018561055e565b90506020020135826101979190610574565b91508260000361016c576040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561022d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102519190610587565b506040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e9190610587565b508692505b600019909201916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a0416ed389898681811061036b5761036b61055e565b905060200201602081019061038091906105b0565b8888878181106103925761039261055e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b039094166004850152602002919091013560248301525060448101849052606401600060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b50505050826000036103235760408051888152602081018490529081018290527f34c73181fd22a80ebbb69617ebf3eb27bb38fa6c4c91169a8966340a3ef290d59060600160405180910390a15050505050505050565b60008083601f84011261047d57600080fd5b50813567ffffffffffffffff81111561049557600080fd5b6020830191508360208260051b85010111156104b057600080fd5b9250929050565b6000806000806000606086880312156104cf57600080fd5b853567ffffffffffffffff808211156104e757600080fd5b6104f389838a0161046b565b9097509550602088013591508082111561050c57600080fd5b506105198882890161046b565b96999598509660400135949350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105585761055861052b565b92915050565b634e487b7160e01b600052603260045260246000fd5b808201808211156105585761055861052b565b60006020828403121561059957600080fd5b815180151581146105a957600080fd5b9392505050565b6000602082840312156105c257600080fd5b81356001600160a01b03811681146105a957600080fdfea26469706673582212201ea766a5733410acc65fd330567afb2b1e3f7b097c6a76351d3d7b680c9ed58364736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80635837b63d14610046578063a430be6c1461005b578063cdb61fdd1461009e575b600080fd5b6100596100543660046104b7565b6100c5565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100827f000000000000000000000000000000000000000000000000000000000000000081565b838214610158576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4e756d626572206f66206163636f756e747320646f6573206e6f74206d61746360448201527f68206e756d626572206f662076616c7565730000000000000000000000000000606482015260840160405180910390fd5b836000806101698462093a80610541565b90505b600019909201918585848181106101855761018561055e565b90506020020135826101979190610574565b91508260000361016c576040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af115801561022d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102519190610587565b506040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e9190610587565b508692505b600019909201916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a0416ed389898681811061036b5761036b61055e565b905060200201602081019061038091906105b0565b8888878181106103925761039261055e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b039094166004850152602002919091013560248301525060448101849052606401600060405180830381600087803b15801561040057600080fd5b505af1158015610414573d6000803e3d6000fd5b50505050826000036103235760408051888152602081018490529081018290527f34c73181fd22a80ebbb69617ebf3eb27bb38fa6c4c91169a8966340a3ef290d59060600160405180910390a15050505050505050565b60008083601f84011261047d57600080fd5b50813567ffffffffffffffff81111561049557600080fd5b6020830191508360208260051b85010111156104b057600080fd5b9250929050565b6000806000806000606086880312156104cf57600080fd5b853567ffffffffffffffff808211156104e757600080fd5b6104f389838a0161046b565b9097509550602088013591508082111561050c57600080fd5b506105198882890161046b565b96999598509660400135949350505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105585761055861052b565b92915050565b634e487b7160e01b600052603260045260246000fd5b808201808211156105585761055861052b565b60006020828403121561059957600080fd5b815180151581146105a957600080fd5b9392505050565b6000602082840312156105c257600080fd5b81356001600160a01b03811681146105a957600080fdfea26469706673582212201ea766a5733410acc65fd330567afb2b1e3f7b097c6a76351d3d7b680c9ed58364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "distributeEscrowed(address[],uint256[],uint256)": {
        "details": "required to approve this contract address to spend senders tokens before calling",
        "params": {
          "accounts": ": list of accounts to escrow",
          "amounts": ": corresponding list of amounts to escrow",
          "durationWeeks": ": number of weeks to escrow"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "dextoro()": {
        "notice": "dextoro token contract"
      },
      "distributeEscrowed(address[],uint256[],uint256)": {
        "notice": "Set escrow amounts in batches."
      },
      "rewardEscrow()": {
        "notice": "rewards escrow contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}