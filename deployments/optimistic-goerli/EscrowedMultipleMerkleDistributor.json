{
  "address": "0x1D62b68b68E9AA27cDD9Dd12B62eEF09e9EB9386",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardEscrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "MerkleRootModified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "epoch",
              "type": "uint256"
            }
          ],
          "internalType": "struct IEscrowedMultipleMerkleDistributor.Claims[]",
          "name": "claims",
          "type": "tuple[]"
        }
      ],
      "name": "claimMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleRoots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardEscrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "setMerkleRootForEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "02850ed804265dc054109db0f6b1fe3b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardEscrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"MerkleRootModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"internalType\":\"struct IEscrowedMultipleMerkleDistributor.Claims[]\",\"name\":\"claims\",\"type\":\"tuple[]\"}],\"name\":\"claimMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEscrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"setMerkleRootForEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256,address,uint256,bytes32[],uint256)\":{\"params\":{\"account\":\": address used for escrow entry\",\"amount\":\": $DTORO amount to be escrowed\",\"epoch\":\": distribution index number\",\"index\":\": used for merkle tree managment and verification\",\"merkleProof\":\": off-chain generated proof of merkle tree inclusion\"}},\"claimMultiple((uint256,address,uint256,bytes32[],uint256)[])\":{\"params\":{\"claims\":\": array of valid claims\"}},\"constructor\":{\"params\":{\"_owner\":\": designated owner of this contract\",\"_rewardEscrow\":\": address of dextoro escrow for tokens claimed\",\"_token\":\": address of erc20 token to be distributed\"}},\"isClaimed(uint256,uint256)\":{\"params\":{\"epoch\":\": distribution index number\",\"index\":\": used for claim managment\"},\"returns\":{\"_0\":\"true if indexed claim has been claimed\"}},\"setMerkleRootForEpoch(bytes32,uint256)\":{\"params\":{\"epoch\":\": distribution index number\",\"merkleRoot\":\": new merkle root\"}}},\"stateVariables\":{\"rewardEscrow\":{\"return\":\"escrow for tokens claimed\",\"returns\":{\"_0\":\"escrow for tokens claimed\"}},\"token\":{\"return\":\"token to be distributed (DTORO)\",\"returns\":{\"_0\":\"token to be distributed (DTORO)\"}}},\"title\":\"DexToro EscrowedMultipleMerkleDistributor \",\"version\":1},\"userdoc\":{\"events\":{\"Claimed(uint256,address,uint256,uint256)\":{\"notice\":\"event is triggered whenever a call to `claim` succeeds\"},\"MerkleRootModified(uint256)\":{\"notice\":\"event is triggered whenever a merkle root is set\"}},\"kind\":\"user\",\"methods\":{\"claim(uint256,address,uint256,bytes32[],uint256)\":{\"notice\":\"attempt to claim as `account` and escrow DTORO for `account`\"},\"claimMultiple((uint256,address,uint256,bytes32[],uint256)[])\":{\"notice\":\"function that aggregates multiple claims\"},\"constructor\":{\"notice\":\"set addresses for deployed rewardEscrow and DTORO. Establish merkle root for verification\"},\"isClaimed(uint256,uint256)\":{\"notice\":\"determine if indexed claim has been claimed\"},\"setMerkleRootForEpoch(bytes32,uint256)\":{\"notice\":\"modify merkle root for existing distribution epoch\"}},\"notice\":\"Facilitates trading incentives distribution over multiple periods.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EscrowedMultipleMerkleDistributor.sol\":\"EscrowedMultipleMerkleDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/EscrowedMultipleMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./utils/Owned.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"./interfaces/IRewardEscrow.sol\\\";\\r\\nimport \\\"./interfaces/IEscrowedMultipleMerkleDistributor.sol\\\";\\r\\n\\r\\n/// @title DexToro EscrowedMultipleMerkleDistributor\\r\\n/// \\r\\n/// @notice Facilitates trading incentives distribution over multiple periods.\\r\\ncontract EscrowedMultipleMerkleDistributor is\\r\\n    IEscrowedMultipleMerkleDistributor,\\r\\n    Owned\\r\\n{\\r\\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\\r\\n    address public immutable override rewardEscrow;\\r\\n\\r\\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\\r\\n    address public immutable override token;\\r\\n\\r\\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\\r\\n    mapping(uint256 => bytes32) public override merkleRoots;\\r\\n\\r\\n    /// @notice an epoch to packed array of claimed booleans mapping\\r\\n    mapping(uint256 => mapping(uint256 => uint256)) private claimedBitMaps;\\r\\n\\r\\n    /// @notice set addresses for deployed rewardEscrow and DTORO.\\r\\n    /// Establish merkle root for verification\\r\\n    /// @param _owner: designated owner of this contract\\r\\n    /// @param _token: address of erc20 token to be distributed\\r\\n    /// @param _rewardEscrow: address of dextoro escrow for tokens claimed\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        address _token,\\r\\n        address _rewardEscrow\\r\\n    ) Owned(_owner) {\\r\\n        token = _token;\\r\\n        rewardEscrow = _rewardEscrow;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\\r\\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        merkleRoots[epoch] = merkleRoot;\\r\\n        emit MerkleRootModified(epoch);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\\r\\n    function isClaimed(uint256 index, uint256 epoch)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 claimedWordIndex = index / 256;\\r\\n        uint256 claimedBitIndex = index % 256;\\r\\n        uint256 claimedWord = claimedBitMaps[epoch][claimedWordIndex];\\r\\n        uint256 mask = (1 << claimedBitIndex);\\r\\n        return claimedWord & mask == mask;\\r\\n    }\\r\\n\\r\\n    /// @notice set claimed status for indexed claim to true\\r\\n    /// @param index: used for claim managment\\r\\n    /// @param epoch: distribution index to check\\r\\n    function _setClaimed(uint256 index, uint256 epoch) private {\\r\\n        uint256 claimedWordIndex = index / 256;\\r\\n        uint256 claimedBitIndex = index % 256;\\r\\n        claimedBitMaps[epoch][claimedWordIndex] =\\r\\n            claimedBitMaps[epoch][claimedWordIndex] |\\r\\n            (1 << claimedBitIndex);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\\r\\n    function claim(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        bytes32[] calldata merkleProof,\\r\\n        uint256 epoch\\r\\n    ) public override {\\r\\n        require(\\r\\n            !isClaimed(index, epoch),\\r\\n            \\\"EscrowedMultipleMerkleDistributor: Drop already claimed.\\\"\\r\\n        );\\r\\n\\r\\n        // verify the merkle proof\\r\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\r\\n        require(\\r\\n            MerkleProof.verify(merkleProof, merkleRoots[epoch], node),\\r\\n            \\\"EscrowedMultipleMerkleDistributor: Invalid proof.\\\"\\r\\n        );\\r\\n\\r\\n        // mark it claimed and send the token to RewardEscrow\\r\\n        _setClaimed(index, epoch);\\r\\n        IERC20(token).approve(rewardEscrow, amount);\\r\\n        IRewardEscrow(rewardEscrow).createEscrowEntry(\\r\\n            account,\\r\\n            amount,\\r\\n            52 weeks\\r\\n        );\\r\\n\\r\\n        emit Claimed(index, account, amount, epoch);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IEscrowedMultipleMerkleDistributor\\r\\n    function claimMultiple(Claims[] calldata claims) external override {\\r\\n        uint256 cacheLength = claims.length;\\r\\n        for (uint256 i = 0; i < cacheLength; ) {\\r\\n            claim(\\r\\n                claims[i].index,\\r\\n                claims[i].account,\\r\\n                claims[i].amount,\\r\\n                claims[i].merkleProof,\\r\\n                claims[i].epoch\\r\\n            );\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4c40e95bc65bdf7130ac18ba0b2ee7a5b2f4fd81266764d47bbecb39f67fb7ee\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IEscrowedMultipleMerkleDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n// Allows anyone to claim a token if they exist in a merkle root.\\r\\ninterface IEscrowedMultipleMerkleDistributor {\\r\\n    /// @notice data structure for aggregating multiple claims\\r\\n    struct Claims {\\r\\n        uint256 index;\\r\\n        address account;\\r\\n        uint256 amount;\\r\\n        bytes32[] merkleProof;\\r\\n        uint256 epoch;\\r\\n    }\\r\\n\\r\\n    /// @notice event is triggered whenever a call to `claim` succeeds\\r\\n    event Claimed(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        uint256 epoch\\r\\n    );\\r\\n\\r\\n    /// @notice event is triggered whenever a merkle root is set\\r\\n    event MerkleRootModified(uint256 epoch);\\r\\n\\r\\n    /// @return escrow for tokens claimed\\r\\n    function rewardEscrow() external view returns (address);\\r\\n\\r\\n    /// @return token to be distributed (DTORO)\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    // @return the merkle root of the merkle tree containing account balances available to claim\\r\\n    function merkleRoots(uint256) external view returns (bytes32);\\r\\n\\r\\n    /// @notice determine if indexed claim has been claimed\\r\\n    /// @param index: used for claim managment\\r\\n    /// @param epoch: distribution index number\\r\\n    /// @return true if indexed claim has been claimed\\r\\n    function isClaimed(uint256 index, uint256 epoch)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /// @notice attempt to claim as `account` and escrow DTORO for `account`\\r\\n    /// @param index: used for merkle tree managment and verification\\r\\n    /// @param account: address used for escrow entry\\r\\n    /// @param amount: $DTORO amount to be escrowed\\r\\n    /// @param merkleProof: off-chain generated proof of merkle tree inclusion\\r\\n    /// @param epoch: distribution index number\\r\\n    function claim(\\r\\n        uint256 index,\\r\\n        address account,\\r\\n        uint256 amount,\\r\\n        bytes32[] calldata merkleProof,\\r\\n        uint256 epoch\\r\\n    ) external;\\r\\n\\r\\n    /// @notice function that aggregates multiple claims\\r\\n    /// @param claims: array of valid claims\\r\\n    function claimMultiple(Claims[] calldata claims) external;\\r\\n\\r\\n    /// @notice modify merkle root for existing distribution epoch\\r\\n    /// @param merkleRoot: new merkle root\\r\\n    /// @param epoch: distribution index number\\r\\n    function setMerkleRootForEpoch(bytes32 merkleRoot, uint256 epoch) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb9eeaaa20bac900c2ec024e08e73ebec86060b4296d104b8fb44591a516923ee\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary VestingEntries {\\r\\n    struct VestingEntry {\\r\\n        uint64 endTime;\\r\\n        uint256 escrowAmount;\\r\\n        uint256 duration;\\r\\n    }\\r\\n    struct VestingEntryWithID {\\r\\n        uint64 endTime;\\r\\n        uint256 escrowAmount;\\r\\n        uint256 entryID;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IRewardEscrow {\\r\\n    // Views\\r\\n    function getDexToroAddress() external view returns (address);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function numVestingEntries(address account) external view returns (uint256);\\r\\n\\r\\n    function totalEscrowedAccountBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function totalVestedAccountBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function getVestingQuantity(address account, uint256[] calldata entryIDs)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getVestingSchedules(\\r\\n        address account,\\r\\n        uint256 index,\\r\\n        uint256 pageSize\\r\\n    ) external view returns (VestingEntries.VestingEntryWithID[] memory);\\r\\n\\r\\n    function getAccountVestingEntryIDs(\\r\\n        address account,\\r\\n        uint256 index,\\r\\n        uint256 pageSize\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function getVestingEntryClaimable(address account, uint256 entryID)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    function getVestingEntry(address account, uint256 entryID)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint64,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    // Mutative functions\\r\\n    function vest(uint256[] calldata entryIDs) external;\\r\\n\\r\\n    function createEscrowEntry(\\r\\n        address beneficiary,\\r\\n        uint256 deposit,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function appendVestingEntry(\\r\\n        address account,\\r\\n        uint256 quantity,\\r\\n        uint256 duration\\r\\n    ) external;\\r\\n\\r\\n    function stakeEscrow(uint256 _amount) external;\\r\\n\\r\\n    function unstakeEscrow(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x4cf88db8366e6aa6487e90abe6b80bba4b22b6f760721640b8a03bacf518f215\",\"license\":\"MIT\"},\"contracts/utils/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// https://docs.synthetix.io/contracts/source/contracts/owned\\r\\ncontract Owned {\\r\\n    address public owner;\\r\\n    address public nominatedOwner;\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\r\\n        owner = _owner;\\r\\n        emit OwnerChanged(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function nominateNewOwner(address _owner) external onlyOwner {\\r\\n        nominatedOwner = _owner;\\r\\n        emit OwnerNominated(_owner);\\r\\n    }\\r\\n\\r\\n    function acceptOwnership() external {\\r\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\r\\n        emit OwnerChanged(owner, nominatedOwner);\\r\\n        owner = nominatedOwner;\\r\\n        nominatedOwner = address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _onlyOwner() private view {\\r\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\r\\n    }\\r\\n\\r\\n    event OwnerNominated(address newOwner);\\r\\n    event OwnerChanged(address oldOwner, address newOwner);\\r\\n}\\r\\n\",\"keccak256\":\"0x0c1a85d3544f9b0a883ff8aaf469aec37de38263d82bba0a925212558df4e18f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610e0e380380610e0e83398101604081905261002f91610116565b826001600160a01b03811661008a5760405162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1506001600160a01b0391821660a0521660805250610159565b80516001600160a01b038116811461011157600080fd5b919050565b60008060006060848603121561012b57600080fd5b610134846100fa565b9250610142602085016100fa565b9150610150604085016100fa565b90509250925092565b60805160a051610c7b610193600039600081816101e4015261065f0152600081816101610152818161063001526107160152610c7b6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c8063a430be6c11610081578063d0b55e8c1161005b578063d0b55e8c146101a9578063f364c90c146101bc578063fc0c546a146101df57600080fd5b8063a430be6c1461015c578063ab5943db14610183578063c02bb7ba1461019657600080fd5b806371c5ecb1116100b257806371c5ecb11461011357806379ba5097146101415780638da5cb5b1461014957600080fd5b80631627540c146100ce57806353a47bb7146100e3575b600080fd5b6100e16100dc3660046109ea565b610206565b005b6001546100f6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610133610121366004610a05565b60026020526000908152604090205481565b60405190815260200161010a565b6100e161026f565b6000546100f6906001600160a01b031681565b6100f67f000000000000000000000000000000000000000000000000000000000000000081565b6100e1610191366004610a6a565b610373565b6100e16101a4366004610aac565b610471565b6100e16101b7366004610b1c565b6107cc565b6101cf6101ca366004610b1c565b610823565b604051901515815260200161010a565b6100f67f000000000000000000000000000000000000000000000000000000000000000081565b61020e61086e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b6001546001600160a01b031633146102f45760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e657273686970000000000000000000000060648201526084015b60405180910390fd5b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1600180546000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b8060005b8181101561046b5761046384848381811061039457610394610b3e565b90506020028101906103a69190610b54565b358585848181106103b9576103b9610b3e565b90506020028101906103cb9190610b54565b6103dc9060408101906020016109ea565b8686858181106103ee576103ee610b3e565b90506020028101906104009190610b54565b6040013587878681811061041657610416610b3e565b90506020028101906104289190610b54565b610436906060810190610b74565b89898881811061044857610448610b3e565b905060200281019061045a9190610b54565b60800135610471565b600101610377565b50505050565b61047b8682610823565b156104ee5760405162461bcd60e51b815260206004820152603860248201527f457363726f7765644d756c7469706c654d65726b6c654469737472696275746f60448201527f723a2044726f7020616c726561647920636c61696d65642e000000000000000060648201526084016102eb565b60408051602081018890526bffffffffffffffffffffffff19606088901b16918101919091526054810185905260009060740160405160208183030381529060405280519060200120905061058484848080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508781526002602052604090205492508591506108f09050565b6105f65760405162461bcd60e51b815260206004820152603160248201527f457363726f7765644d756c7469706c654d65726b6c654469737472696275746f60448201527f723a20496e76616c69642070726f6f662e00000000000000000000000000000060648201526084016102eb565b6106008783610906565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190610bbe565b506040517fa0416ed30000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018790526301dfe20060448301527f0000000000000000000000000000000000000000000000000000000000000000169063a0416ed390606401600060405180830381600087803b15801561075a57600080fd5b505af115801561076e573d6000803e3d6000fd5b5050604080518a81526001600160a01b038a166020820152908101889052606081018590527fd9cb1e2714d65a111c0f20f060176ad657496bd47a3de04ec7c3d4ca232112ac9250608001905060405180910390a150505050505050565b6107d461086e565b60008181526002602052604090819020839055517f7835b531ba83151bc18466c9b0ab4b168056cb422098530a34952b03f87ba519906108179083815260200190565b60405180910390a15050565b60008061083261010085610bf6565b9050600061084261010086610c0a565b60009485526003602090815260408087209487529390529190932054600190911b908116149392505050565b6000546001600160a01b031633146108ee5760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e000000000000000000000000000000000060648201526084016102eb565b565b6000826108fd858461094f565b14949350505050565b600061091461010084610bf6565b9050600061092461010085610c0a565b6000938452600360209081526040808620948652939052919092208054600190921b90911790555050565b600081815b8451811015610994576109808286838151811061097357610973610b3e565b602002602001015161099c565b91508061098c81610c1e565b915050610954565b509392505050565b60008183106109b85760008281526020849052604090206109c7565b60008381526020839052604090205b9392505050565b80356001600160a01b03811681146109e557600080fd5b919050565b6000602082840312156109fc57600080fd5b6109c7826109ce565b600060208284031215610a1757600080fd5b5035919050565b60008083601f840112610a3057600080fd5b50813567ffffffffffffffff811115610a4857600080fd5b6020830191508360208260051b8501011115610a6357600080fd5b9250929050565b60008060208385031215610a7d57600080fd5b823567ffffffffffffffff811115610a9457600080fd5b610aa085828601610a1e565b90969095509350505050565b60008060008060008060a08789031215610ac557600080fd5b86359550610ad5602088016109ce565b945060408701359350606087013567ffffffffffffffff811115610af857600080fd5b610b0489828a01610a1e565b979a9699509497949695608090950135949350505050565b60008060408385031215610b2f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112610b6a57600080fd5b9190910192915050565b6000808335601e19843603018112610b8b57600080fd5b83018035915067ffffffffffffffff821115610ba657600080fd5b6020019150600581901b3603821315610a6357600080fd5b600060208284031215610bd057600080fd5b815180151581146109c757600080fd5b634e487b7160e01b600052601260045260246000fd5b600082610c0557610c05610be0565b500490565b600082610c1957610c19610be0565b500690565b600060018201610c3e57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212201559075c2a9b743154640323b7302029be10893eed7d34488aa6e0008c4218b864736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c8063a430be6c11610081578063d0b55e8c1161005b578063d0b55e8c146101a9578063f364c90c146101bc578063fc0c546a146101df57600080fd5b8063a430be6c1461015c578063ab5943db14610183578063c02bb7ba1461019657600080fd5b806371c5ecb1116100b257806371c5ecb11461011357806379ba5097146101415780638da5cb5b1461014957600080fd5b80631627540c146100ce57806353a47bb7146100e3575b600080fd5b6100e16100dc3660046109ea565b610206565b005b6001546100f6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610133610121366004610a05565b60026020526000908152604090205481565b60405190815260200161010a565b6100e161026f565b6000546100f6906001600160a01b031681565b6100f67f000000000000000000000000000000000000000000000000000000000000000081565b6100e1610191366004610a6a565b610373565b6100e16101a4366004610aac565b610471565b6100e16101b7366004610b1c565b6107cc565b6101cf6101ca366004610b1c565b610823565b604051901515815260200161010a565b6100f67f000000000000000000000000000000000000000000000000000000000000000081565b61020e61086e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b6001546001600160a01b031633146102f45760405162461bcd60e51b815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e657273686970000000000000000000000060648201526084015b60405180910390fd5b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1600180546000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03841617909155169055565b8060005b8181101561046b5761046384848381811061039457610394610b3e565b90506020028101906103a69190610b54565b358585848181106103b9576103b9610b3e565b90506020028101906103cb9190610b54565b6103dc9060408101906020016109ea565b8686858181106103ee576103ee610b3e565b90506020028101906104009190610b54565b6040013587878681811061041657610416610b3e565b90506020028101906104289190610b54565b610436906060810190610b74565b89898881811061044857610448610b3e565b905060200281019061045a9190610b54565b60800135610471565b600101610377565b50505050565b61047b8682610823565b156104ee5760405162461bcd60e51b815260206004820152603860248201527f457363726f7765644d756c7469706c654d65726b6c654469737472696275746f60448201527f723a2044726f7020616c726561647920636c61696d65642e000000000000000060648201526084016102eb565b60408051602081018890526bffffffffffffffffffffffff19606088901b16918101919091526054810185905260009060740160405160208183030381529060405280519060200120905061058484848080602002602001604051908101604052809392919081815260200183836020028082843760009201829052508781526002602052604090205492508591506108f09050565b6105f65760405162461bcd60e51b815260206004820152603160248201527f457363726f7765644d756c7469706c654d65726b6c654469737472696275746f60448201527f723a20496e76616c69642070726f6f662e00000000000000000000000000000060648201526084016102eb565b6106008783610906565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190610bbe565b506040517fa0416ed30000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018790526301dfe20060448301527f0000000000000000000000000000000000000000000000000000000000000000169063a0416ed390606401600060405180830381600087803b15801561075a57600080fd5b505af115801561076e573d6000803e3d6000fd5b5050604080518a81526001600160a01b038a166020820152908101889052606081018590527fd9cb1e2714d65a111c0f20f060176ad657496bd47a3de04ec7c3d4ca232112ac9250608001905060405180910390a150505050505050565b6107d461086e565b60008181526002602052604090819020839055517f7835b531ba83151bc18466c9b0ab4b168056cb422098530a34952b03f87ba519906108179083815260200190565b60405180910390a15050565b60008061083261010085610bf6565b9050600061084261010086610c0a565b60009485526003602090815260408087209487529390529190932054600190911b908116149392505050565b6000546001600160a01b031633146108ee5760405162461bcd60e51b815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e000000000000000000000000000000000060648201526084016102eb565b565b6000826108fd858461094f565b14949350505050565b600061091461010084610bf6565b9050600061092461010085610c0a565b6000938452600360209081526040808620948652939052919092208054600190921b90911790555050565b600081815b8451811015610994576109808286838151811061097357610973610b3e565b602002602001015161099c565b91508061098c81610c1e565b915050610954565b509392505050565b60008183106109b85760008281526020849052604090206109c7565b60008381526020839052604090205b9392505050565b80356001600160a01b03811681146109e557600080fd5b919050565b6000602082840312156109fc57600080fd5b6109c7826109ce565b600060208284031215610a1757600080fd5b5035919050565b60008083601f840112610a3057600080fd5b50813567ffffffffffffffff811115610a4857600080fd5b6020830191508360208260051b8501011115610a6357600080fd5b9250929050565b60008060208385031215610a7d57600080fd5b823567ffffffffffffffff811115610a9457600080fd5b610aa085828601610a1e565b90969095509350505050565b60008060008060008060a08789031215610ac557600080fd5b86359550610ad5602088016109ce565b945060408701359350606087013567ffffffffffffffff811115610af857600080fd5b610b0489828a01610a1e565b979a9699509497949695608090950135949350505050565b60008060408385031215610b2f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112610b6a57600080fd5b9190910192915050565b6000808335601e19843603018112610b8b57600080fd5b83018035915067ffffffffffffffff821115610ba657600080fd5b6020019150600581901b3603821315610a6357600080fd5b600060208284031215610bd057600080fd5b815180151581146109c757600080fd5b634e487b7160e01b600052601260045260246000fd5b600082610c0557610c05610be0565b500490565b600082610c1957610c19610be0565b500690565b600060018201610c3e57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212201559075c2a9b743154640323b7302029be10893eed7d34488aa6e0008c4218b864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256,address,uint256,bytes32[],uint256)": {
        "params": {
          "account": ": address used for escrow entry",
          "amount": ": $DTORO amount to be escrowed",
          "epoch": ": distribution index number",
          "index": ": used for merkle tree managment and verification",
          "merkleProof": ": off-chain generated proof of merkle tree inclusion"
        }
      },
      "claimMultiple((uint256,address,uint256,bytes32[],uint256)[])": {
        "params": {
          "claims": ": array of valid claims"
        }
      },
      "constructor": {
        "params": {
          "_owner": ": designated owner of this contract",
          "_rewardEscrow": ": address of dextoro escrow for tokens claimed",
          "_token": ": address of erc20 token to be distributed"
        }
      },
      "isClaimed(uint256,uint256)": {
        "params": {
          "epoch": ": distribution index number",
          "index": ": used for claim managment"
        },
        "returns": {
          "_0": "true if indexed claim has been claimed"
        }
      },
      "setMerkleRootForEpoch(bytes32,uint256)": {
        "params": {
          "epoch": ": distribution index number",
          "merkleRoot": ": new merkle root"
        }
      }
    },
    "stateVariables": {
      "rewardEscrow": {
        "return": "escrow for tokens claimed",
        "returns": {
          "_0": "escrow for tokens claimed"
        }
      },
      "token": {
        "return": "token to be distributed (DTORO)",
        "returns": {
          "_0": "token to be distributed (DTORO)"
        }
      }
    },
    "title": "DexToro EscrowedMultipleMerkleDistributor ",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(uint256,address,uint256,uint256)": {
        "notice": "event is triggered whenever a call to `claim` succeeds"
      },
      "MerkleRootModified(uint256)": {
        "notice": "event is triggered whenever a merkle root is set"
      }
    },
    "kind": "user",
    "methods": {
      "claim(uint256,address,uint256,bytes32[],uint256)": {
        "notice": "attempt to claim as `account` and escrow DTORO for `account`"
      },
      "claimMultiple((uint256,address,uint256,bytes32[],uint256)[])": {
        "notice": "function that aggregates multiple claims"
      },
      "constructor": {
        "notice": "set addresses for deployed rewardEscrow and DTORO. Establish merkle root for verification"
      },
      "isClaimed(uint256,uint256)": {
        "notice": "determine if indexed claim has been claimed"
      },
      "setMerkleRootForEpoch(bytes32,uint256)": {
        "notice": "modify merkle root for existing distribution epoch"
      }
    },
    "notice": "Facilitates trading incentives distribution over multiple periods.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20822,
        "contract": "contracts/EscrowedMultipleMerkleDistributor.sol:EscrowedMultipleMerkleDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20824,
        "contract": "contracts/EscrowedMultipleMerkleDistributor.sol:EscrowedMultipleMerkleDistributor",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11444,
        "contract": "contracts/EscrowedMultipleMerkleDistributor.sol:EscrowedMultipleMerkleDistributor",
        "label": "merkleRoots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 11451,
        "contract": "contracts/EscrowedMultipleMerkleDistributor.sol:EscrowedMultipleMerkleDistributor",
        "label": "claimedBitMaps",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}